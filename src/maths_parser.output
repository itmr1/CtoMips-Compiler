Nonterminals useless in grammar

    STATEMENT
    EXPR_STATEMENT
    COMPOUND_STATEMENT
    SELECT_STATEMENT
    ITER_STATEMENT
    JUMP_STATEMENT


Terminals unused in grammar

    TOK_IF
    TOK_WHILE
    TOK_ELSE
    TOK_RETURN
    TOK_BREAK
    TOK_SEMICOLON
    TOK_LCBRACKET
    TOK_RCBRACKET


Rules useless in grammar

   36 STATEMENT: SELECT_STATEMENT
   37          | ITER_STATEMENT
   38          | JUMP_STATEMENT
   39          | EXPR_STATEMENT
   40          | COMPOUND_STATEMENT

   41 EXPR_STATEMENT: TOK_SEMICOLON
   42               | EXPR TOK_SEMICOLON

   43 COMPOUND_STATEMENT: TOK_LCBRACKET TOK_RCBRACKET
   44                   | TOK_LCBRACKET STATEMENT TOK_RBRACKET

   45 SELECT_STATEMENT: TOK_IF TOK_LBRACKET LOGIC_EXPR TOK_RBRACKET STATEMENT
   46                 | TOK_IF TOK_LBRACKET LOGIC_EXPR TOK_RBRACKET STATEMENT TOK_ELSE STATEMENT

   47 ITER_STATEMENT: TOK_WHILE TOK_LBRACKET EXPR TOK_RBRACKET STATEMENT

   48 JUMP_STATEMENT: TOK_BREAK TOK_SEMICOLON
   49               | TOK_RETURN TOK_SEMICOLON
   50               | TOK_RETURN EXPR TOK_SEMICOLON


Grammar

    0 $accept: ROOT $end

    1 ROOT: EXPR

    2 EXPR: VAR_INIT

    3 VAR_INIT: ASSIGN_EXPR
    4         | VARTYPE_INT TOK_VAR
    5         | VARTYPE_INT TOK_VAR TOK_EQASSIGN ASSIGN_EXPR

    6 ASSIGN_EXPR: LOGIC_EXPR
    7            | TOK_VAR TOK_EQASSIGN ASSIGN_EXPR
    8            | TOK_VAR TOK_ADDASSIGN ASSIGN_EXPR
    9            | TOK_VAR TOK_SUBASSIGN ASSIGN_EXPR
   10            | TOK_VAR TOK_MULASSIGN ASSIGN_EXPR
   11            | TOK_VAR TOK_DIVASSIGN ASSIGN_EXPR
   12            | TOK_VAR TOK_MODASSIGN ASSIGN_EXPR

   13 LOGIC_EXPR: EQ_EXPR
   14           | LOGIC_EXPR TOK_BIT_AND EQ_EXPR
   15           | LOGIC_EXPR TOK_BIT_OR EQ_EXPR

   16 EQ_EXPR: REL_EXPR
   17        | EQ_EXPR TOK_EQ ADD_EXPR
   18        | EQ_EXPR TOK_NEQ ADD_EXPR

   19 REL_EXPR: ADD_EXPR
   20         | REL_EXPR TOK_LE ADD_EXPR
   21         | REL_EXPR TOK_GE ADD_EXPR
   22         | REL_EXPR TOK_G ADD_EXPR
   23         | REL_EXPR TOK_L ADD_EXPR

   24 ADD_EXPR: MULT_EXPR
   25         | ADD_EXPR TOK_PLUS MULT_EXPR
   26         | ADD_EXPR TOK_MINUS MULT_EXPR

   27 MULT_EXPR: UNARY
   28          | MULT_EXPR TOK_MUL UNARY
   29          | MULT_EXPR TOK_DIVIDE UNARY
   30          | MULT_EXPR TOK_MOD UNARY

   31 UNARY: FACTOR
   32      | TOK_MINUS UNARY

   33 FACTOR: TOK_N
   34       | TOK_VAR
   35       | TOK_LBRACKET ASSIGN_EXPR TOK_RBRACKET


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TOK_BIT_AND (258) 14
    TOK_BIT_OR (259) 15
    TOK_EQ (260) 17
    TOK_NEQ (261) 18
    TOK_GE (262) 21
    TOK_LE (263) 20
    TOK_G (264) 22
    TOK_L (265) 23
    TOK_IF (266)
    TOK_WHILE (267)
    TOK_ELSE (268)
    TOK_RETURN (269)
    TOK_BREAK (270)
    TOK_MUL (271) 28
    TOK_DIVIDE (272) 29
    TOK_PLUS (273) 25
    TOK_MINUS (274) 26 32
    TOK_MOD (275) 30
    TOK_LBRACKET (276) 35
    TOK_RBRACKET (277) 35
    TOK_SEMICOLON (278)
    TOK_LCBRACKET (279)
    TOK_RCBRACKET (280)
    TOK_N <number> (281) 33
    TOK_VAR <string> (282) 4 5 7 8 9 10 11 12 34
    VARTYPE_INT (283) 4 5
    TOK_SUBASSIGN (284) 9
    TOK_MULASSIGN (285) 10
    TOK_DIVASSIGN (286) 11
    TOK_ADDASSIGN (287) 8
    TOK_EQASSIGN (288) 5 7
    TOK_MODASSIGN (289) 12


Nonterminals, with rules where they appear

    $accept (35)
        on left: 0
    ROOT (36)
        on left: 1
        on right: 0
    EXPR <expr> (37)
        on left: 2
        on right: 1
    VAR_INIT <expr> (38)
        on left: 3 4 5
        on right: 2
    ASSIGN_EXPR <expr> (39)
        on left: 6 7 8 9 10 11 12
        on right: 3 5 7 8 9 10 11 12 35
    LOGIC_EXPR <expr> (40)
        on left: 13 14 15
        on right: 6 14 15
    EQ_EXPR <expr> (41)
        on left: 16 17 18
        on right: 13 14 15 17 18
    REL_EXPR <expr> (42)
        on left: 19 20 21 22 23
        on right: 16 20 21 22 23
    ADD_EXPR <expr> (43)
        on left: 24 25 26
        on right: 17 18 19 20 21 22 23 25 26
    MULT_EXPR <expr> (44)
        on left: 27 28 29 30
        on right: 24 25 26 28 29 30
    UNARY <expr> (45)
        on left: 31 32
        on right: 27 28 29 30 32
    FACTOR <expr> (46)
        on left: 33 34 35
        on right: 31


State 0

    0 $accept: . ROOT $end

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 4
    VARTYPE_INT   shift, and go to state 5

    ROOT         go to state 6
    EXPR         go to state 7
    VAR_INIT     go to state 8
    ASSIGN_EXPR  go to state 9
    LOGIC_EXPR   go to state 10
    EQ_EXPR      go to state 11
    REL_EXPR     go to state 12
    ADD_EXPR     go to state 13
    MULT_EXPR    go to state 14
    UNARY        go to state 15
    FACTOR       go to state 16


State 1

   32 UNARY: TOK_MINUS . UNARY

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    UNARY   go to state 18
    FACTOR  go to state 16


State 2

   35 FACTOR: TOK_LBRACKET . ASSIGN_EXPR TOK_RBRACKET

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 4

    ASSIGN_EXPR  go to state 19
    LOGIC_EXPR   go to state 10
    EQ_EXPR      go to state 11
    REL_EXPR     go to state 12
    ADD_EXPR     go to state 13
    MULT_EXPR    go to state 14
    UNARY        go to state 15
    FACTOR       go to state 16


State 3

   33 FACTOR: TOK_N .

    $default  reduce using rule 33 (FACTOR)


State 4

    7 ASSIGN_EXPR: TOK_VAR . TOK_EQASSIGN ASSIGN_EXPR
    8            | TOK_VAR . TOK_ADDASSIGN ASSIGN_EXPR
    9            | TOK_VAR . TOK_SUBASSIGN ASSIGN_EXPR
   10            | TOK_VAR . TOK_MULASSIGN ASSIGN_EXPR
   11            | TOK_VAR . TOK_DIVASSIGN ASSIGN_EXPR
   12            | TOK_VAR . TOK_MODASSIGN ASSIGN_EXPR
   34 FACTOR: TOK_VAR .

    TOK_SUBASSIGN  shift, and go to state 20
    TOK_MULASSIGN  shift, and go to state 21
    TOK_DIVASSIGN  shift, and go to state 22
    TOK_ADDASSIGN  shift, and go to state 23
    TOK_EQASSIGN   shift, and go to state 24
    TOK_MODASSIGN  shift, and go to state 25

    $default  reduce using rule 34 (FACTOR)


State 5

    4 VAR_INIT: VARTYPE_INT . TOK_VAR
    5         | VARTYPE_INT . TOK_VAR TOK_EQASSIGN ASSIGN_EXPR

    TOK_VAR  shift, and go to state 26


State 6

    0 $accept: ROOT . $end

    $end  shift, and go to state 27


State 7

    1 ROOT: EXPR .

    $default  reduce using rule 1 (ROOT)


State 8

    2 EXPR: VAR_INIT .

    $default  reduce using rule 2 (EXPR)


State 9

    3 VAR_INIT: ASSIGN_EXPR .

    $default  reduce using rule 3 (VAR_INIT)


State 10

    6 ASSIGN_EXPR: LOGIC_EXPR .
   14 LOGIC_EXPR: LOGIC_EXPR . TOK_BIT_AND EQ_EXPR
   15           | LOGIC_EXPR . TOK_BIT_OR EQ_EXPR

    TOK_BIT_AND  shift, and go to state 28
    TOK_BIT_OR   shift, and go to state 29

    $default  reduce using rule 6 (ASSIGN_EXPR)


State 11

   13 LOGIC_EXPR: EQ_EXPR .
   17 EQ_EXPR: EQ_EXPR . TOK_EQ ADD_EXPR
   18        | EQ_EXPR . TOK_NEQ ADD_EXPR

    TOK_EQ   shift, and go to state 30
    TOK_NEQ  shift, and go to state 31

    $default  reduce using rule 13 (LOGIC_EXPR)


State 12

   16 EQ_EXPR: REL_EXPR .
   20 REL_EXPR: REL_EXPR . TOK_LE ADD_EXPR
   21         | REL_EXPR . TOK_GE ADD_EXPR
   22         | REL_EXPR . TOK_G ADD_EXPR
   23         | REL_EXPR . TOK_L ADD_EXPR

    TOK_GE  shift, and go to state 32
    TOK_LE  shift, and go to state 33
    TOK_G   shift, and go to state 34
    TOK_L   shift, and go to state 35

    $default  reduce using rule 16 (EQ_EXPR)


State 13

   19 REL_EXPR: ADD_EXPR .
   25 ADD_EXPR: ADD_EXPR . TOK_PLUS MULT_EXPR
   26         | ADD_EXPR . TOK_MINUS MULT_EXPR

    TOK_PLUS   shift, and go to state 36
    TOK_MINUS  shift, and go to state 37

    $default  reduce using rule 19 (REL_EXPR)


State 14

   24 ADD_EXPR: MULT_EXPR .
   28 MULT_EXPR: MULT_EXPR . TOK_MUL UNARY
   29          | MULT_EXPR . TOK_DIVIDE UNARY
   30          | MULT_EXPR . TOK_MOD UNARY

    TOK_MUL     shift, and go to state 38
    TOK_DIVIDE  shift, and go to state 39
    TOK_MOD     shift, and go to state 40

    $default  reduce using rule 24 (ADD_EXPR)


State 15

   27 MULT_EXPR: UNARY .

    $default  reduce using rule 27 (MULT_EXPR)


State 16

   31 UNARY: FACTOR .

    $default  reduce using rule 31 (UNARY)


State 17

   34 FACTOR: TOK_VAR .

    $default  reduce using rule 34 (FACTOR)


State 18

   32 UNARY: TOK_MINUS UNARY .

    $default  reduce using rule 32 (UNARY)


State 19

   35 FACTOR: TOK_LBRACKET ASSIGN_EXPR . TOK_RBRACKET

    TOK_RBRACKET  shift, and go to state 41


State 20

    9 ASSIGN_EXPR: TOK_VAR TOK_SUBASSIGN . ASSIGN_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 4

    ASSIGN_EXPR  go to state 42
    LOGIC_EXPR   go to state 10
    EQ_EXPR      go to state 11
    REL_EXPR     go to state 12
    ADD_EXPR     go to state 13
    MULT_EXPR    go to state 14
    UNARY        go to state 15
    FACTOR       go to state 16


State 21

   10 ASSIGN_EXPR: TOK_VAR TOK_MULASSIGN . ASSIGN_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 4

    ASSIGN_EXPR  go to state 43
    LOGIC_EXPR   go to state 10
    EQ_EXPR      go to state 11
    REL_EXPR     go to state 12
    ADD_EXPR     go to state 13
    MULT_EXPR    go to state 14
    UNARY        go to state 15
    FACTOR       go to state 16


State 22

   11 ASSIGN_EXPR: TOK_VAR TOK_DIVASSIGN . ASSIGN_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 4

    ASSIGN_EXPR  go to state 44
    LOGIC_EXPR   go to state 10
    EQ_EXPR      go to state 11
    REL_EXPR     go to state 12
    ADD_EXPR     go to state 13
    MULT_EXPR    go to state 14
    UNARY        go to state 15
    FACTOR       go to state 16


State 23

    8 ASSIGN_EXPR: TOK_VAR TOK_ADDASSIGN . ASSIGN_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 4

    ASSIGN_EXPR  go to state 45
    LOGIC_EXPR   go to state 10
    EQ_EXPR      go to state 11
    REL_EXPR     go to state 12
    ADD_EXPR     go to state 13
    MULT_EXPR    go to state 14
    UNARY        go to state 15
    FACTOR       go to state 16


State 24

    7 ASSIGN_EXPR: TOK_VAR TOK_EQASSIGN . ASSIGN_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 4

    ASSIGN_EXPR  go to state 46
    LOGIC_EXPR   go to state 10
    EQ_EXPR      go to state 11
    REL_EXPR     go to state 12
    ADD_EXPR     go to state 13
    MULT_EXPR    go to state 14
    UNARY        go to state 15
    FACTOR       go to state 16


State 25

   12 ASSIGN_EXPR: TOK_VAR TOK_MODASSIGN . ASSIGN_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 4

    ASSIGN_EXPR  go to state 47
    LOGIC_EXPR   go to state 10
    EQ_EXPR      go to state 11
    REL_EXPR     go to state 12
    ADD_EXPR     go to state 13
    MULT_EXPR    go to state 14
    UNARY        go to state 15
    FACTOR       go to state 16


State 26

    4 VAR_INIT: VARTYPE_INT TOK_VAR .
    5         | VARTYPE_INT TOK_VAR . TOK_EQASSIGN ASSIGN_EXPR

    TOK_EQASSIGN  shift, and go to state 48

    $default  reduce using rule 4 (VAR_INIT)


State 27

    0 $accept: ROOT $end .

    $default  accept


State 28

   14 LOGIC_EXPR: LOGIC_EXPR TOK_BIT_AND . EQ_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    EQ_EXPR    go to state 49
    REL_EXPR   go to state 12
    ADD_EXPR   go to state 13
    MULT_EXPR  go to state 14
    UNARY      go to state 15
    FACTOR     go to state 16


State 29

   15 LOGIC_EXPR: LOGIC_EXPR TOK_BIT_OR . EQ_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    EQ_EXPR    go to state 50
    REL_EXPR   go to state 12
    ADD_EXPR   go to state 13
    MULT_EXPR  go to state 14
    UNARY      go to state 15
    FACTOR     go to state 16


State 30

   17 EQ_EXPR: EQ_EXPR TOK_EQ . ADD_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    ADD_EXPR   go to state 51
    MULT_EXPR  go to state 14
    UNARY      go to state 15
    FACTOR     go to state 16


State 31

   18 EQ_EXPR: EQ_EXPR TOK_NEQ . ADD_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    ADD_EXPR   go to state 52
    MULT_EXPR  go to state 14
    UNARY      go to state 15
    FACTOR     go to state 16


State 32

   21 REL_EXPR: REL_EXPR TOK_GE . ADD_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    ADD_EXPR   go to state 53
    MULT_EXPR  go to state 14
    UNARY      go to state 15
    FACTOR     go to state 16


State 33

   20 REL_EXPR: REL_EXPR TOK_LE . ADD_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    ADD_EXPR   go to state 54
    MULT_EXPR  go to state 14
    UNARY      go to state 15
    FACTOR     go to state 16


State 34

   22 REL_EXPR: REL_EXPR TOK_G . ADD_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    ADD_EXPR   go to state 55
    MULT_EXPR  go to state 14
    UNARY      go to state 15
    FACTOR     go to state 16


State 35

   23 REL_EXPR: REL_EXPR TOK_L . ADD_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    ADD_EXPR   go to state 56
    MULT_EXPR  go to state 14
    UNARY      go to state 15
    FACTOR     go to state 16


State 36

   25 ADD_EXPR: ADD_EXPR TOK_PLUS . MULT_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    MULT_EXPR  go to state 57
    UNARY      go to state 15
    FACTOR     go to state 16


State 37

   26 ADD_EXPR: ADD_EXPR TOK_MINUS . MULT_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    MULT_EXPR  go to state 58
    UNARY      go to state 15
    FACTOR     go to state 16


State 38

   28 MULT_EXPR: MULT_EXPR TOK_MUL . UNARY

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    UNARY   go to state 59
    FACTOR  go to state 16


State 39

   29 MULT_EXPR: MULT_EXPR TOK_DIVIDE . UNARY

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    UNARY   go to state 60
    FACTOR  go to state 16


State 40

   30 MULT_EXPR: MULT_EXPR TOK_MOD . UNARY

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    UNARY   go to state 61
    FACTOR  go to state 16


State 41

   35 FACTOR: TOK_LBRACKET ASSIGN_EXPR TOK_RBRACKET .

    $default  reduce using rule 35 (FACTOR)


State 42

    9 ASSIGN_EXPR: TOK_VAR TOK_SUBASSIGN ASSIGN_EXPR .

    $default  reduce using rule 9 (ASSIGN_EXPR)


State 43

   10 ASSIGN_EXPR: TOK_VAR TOK_MULASSIGN ASSIGN_EXPR .

    $default  reduce using rule 10 (ASSIGN_EXPR)


State 44

   11 ASSIGN_EXPR: TOK_VAR TOK_DIVASSIGN ASSIGN_EXPR .

    $default  reduce using rule 11 (ASSIGN_EXPR)


State 45

    8 ASSIGN_EXPR: TOK_VAR TOK_ADDASSIGN ASSIGN_EXPR .

    $default  reduce using rule 8 (ASSIGN_EXPR)


State 46

    7 ASSIGN_EXPR: TOK_VAR TOK_EQASSIGN ASSIGN_EXPR .

    $default  reduce using rule 7 (ASSIGN_EXPR)


State 47

   12 ASSIGN_EXPR: TOK_VAR TOK_MODASSIGN ASSIGN_EXPR .

    $default  reduce using rule 12 (ASSIGN_EXPR)


State 48

    5 VAR_INIT: VARTYPE_INT TOK_VAR TOK_EQASSIGN . ASSIGN_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 4

    ASSIGN_EXPR  go to state 62
    LOGIC_EXPR   go to state 10
    EQ_EXPR      go to state 11
    REL_EXPR     go to state 12
    ADD_EXPR     go to state 13
    MULT_EXPR    go to state 14
    UNARY        go to state 15
    FACTOR       go to state 16


State 49

   14 LOGIC_EXPR: LOGIC_EXPR TOK_BIT_AND EQ_EXPR .
   17 EQ_EXPR: EQ_EXPR . TOK_EQ ADD_EXPR
   18        | EQ_EXPR . TOK_NEQ ADD_EXPR

    TOK_EQ   shift, and go to state 30
    TOK_NEQ  shift, and go to state 31

    $default  reduce using rule 14 (LOGIC_EXPR)


State 50

   15 LOGIC_EXPR: LOGIC_EXPR TOK_BIT_OR EQ_EXPR .
   17 EQ_EXPR: EQ_EXPR . TOK_EQ ADD_EXPR
   18        | EQ_EXPR . TOK_NEQ ADD_EXPR

    TOK_EQ   shift, and go to state 30
    TOK_NEQ  shift, and go to state 31

    $default  reduce using rule 15 (LOGIC_EXPR)


State 51

   17 EQ_EXPR: EQ_EXPR TOK_EQ ADD_EXPR .
   25 ADD_EXPR: ADD_EXPR . TOK_PLUS MULT_EXPR
   26         | ADD_EXPR . TOK_MINUS MULT_EXPR

    TOK_PLUS   shift, and go to state 36
    TOK_MINUS  shift, and go to state 37

    $default  reduce using rule 17 (EQ_EXPR)


State 52

   18 EQ_EXPR: EQ_EXPR TOK_NEQ ADD_EXPR .
   25 ADD_EXPR: ADD_EXPR . TOK_PLUS MULT_EXPR
   26         | ADD_EXPR . TOK_MINUS MULT_EXPR

    TOK_PLUS   shift, and go to state 36
    TOK_MINUS  shift, and go to state 37

    $default  reduce using rule 18 (EQ_EXPR)


State 53

   21 REL_EXPR: REL_EXPR TOK_GE ADD_EXPR .
   25 ADD_EXPR: ADD_EXPR . TOK_PLUS MULT_EXPR
   26         | ADD_EXPR . TOK_MINUS MULT_EXPR

    TOK_PLUS   shift, and go to state 36
    TOK_MINUS  shift, and go to state 37

    $default  reduce using rule 21 (REL_EXPR)


State 54

   20 REL_EXPR: REL_EXPR TOK_LE ADD_EXPR .
   25 ADD_EXPR: ADD_EXPR . TOK_PLUS MULT_EXPR
   26         | ADD_EXPR . TOK_MINUS MULT_EXPR

    TOK_PLUS   shift, and go to state 36
    TOK_MINUS  shift, and go to state 37

    $default  reduce using rule 20 (REL_EXPR)


State 55

   22 REL_EXPR: REL_EXPR TOK_G ADD_EXPR .
   25 ADD_EXPR: ADD_EXPR . TOK_PLUS MULT_EXPR
   26         | ADD_EXPR . TOK_MINUS MULT_EXPR

    TOK_PLUS   shift, and go to state 36
    TOK_MINUS  shift, and go to state 37

    $default  reduce using rule 22 (REL_EXPR)


State 56

   23 REL_EXPR: REL_EXPR TOK_L ADD_EXPR .
   25 ADD_EXPR: ADD_EXPR . TOK_PLUS MULT_EXPR
   26         | ADD_EXPR . TOK_MINUS MULT_EXPR

    TOK_PLUS   shift, and go to state 36
    TOK_MINUS  shift, and go to state 37

    $default  reduce using rule 23 (REL_EXPR)


State 57

   25 ADD_EXPR: ADD_EXPR TOK_PLUS MULT_EXPR .
   28 MULT_EXPR: MULT_EXPR . TOK_MUL UNARY
   29          | MULT_EXPR . TOK_DIVIDE UNARY
   30          | MULT_EXPR . TOK_MOD UNARY

    TOK_MUL     shift, and go to state 38
    TOK_DIVIDE  shift, and go to state 39
    TOK_MOD     shift, and go to state 40

    $default  reduce using rule 25 (ADD_EXPR)


State 58

   26 ADD_EXPR: ADD_EXPR TOK_MINUS MULT_EXPR .
   28 MULT_EXPR: MULT_EXPR . TOK_MUL UNARY
   29          | MULT_EXPR . TOK_DIVIDE UNARY
   30          | MULT_EXPR . TOK_MOD UNARY

    TOK_MUL     shift, and go to state 38
    TOK_DIVIDE  shift, and go to state 39
    TOK_MOD     shift, and go to state 40

    $default  reduce using rule 26 (ADD_EXPR)


State 59

   28 MULT_EXPR: MULT_EXPR TOK_MUL UNARY .

    $default  reduce using rule 28 (MULT_EXPR)


State 60

   29 MULT_EXPR: MULT_EXPR TOK_DIVIDE UNARY .

    $default  reduce using rule 29 (MULT_EXPR)


State 61

   30 MULT_EXPR: MULT_EXPR TOK_MOD UNARY .

    $default  reduce using rule 30 (MULT_EXPR)


State 62

    5 VAR_INIT: VARTYPE_INT TOK_VAR TOK_EQASSIGN ASSIGN_EXPR .

    $default  reduce using rule 5 (VAR_INIT)
