Nonterminals useless in grammar

    ASSIGN_OP
    STATEMENT
    EXPR_STATEMENT
    COMPOUND_STATEMENT
    SELECT_STATEMENT
    ITER_STATEMENT
    JUMP_STATEMENT


Terminals unused in grammar

    TOK_IF
    TOK_WHILE
    TOK_ELSE
    TOK_RETURN
    TOK_BREAK
    TOK_LCBRACKET
    TOK_RCBRACKET
    TOK_SUBASSIGN
    TOK_MULASSIGN
    TOK_DIVASSIGN
    TOK_ADDASSIGN


Rules useless in grammar

   31 ASSIGN_OP: TOK_SUBASSIGN
   32          | TOK_MULASSIGN
   33          | TOK_DIVASSIGN
   34          | TOK_ADDASSIGN

   35 STATEMENT: SELECT_STATEMENT
   36          | ITER_STATEMENT
   37          | JUMP_STATEMENT
   38          | EXPR_STATEMENT
   39          | COMPOUND_STATEMENT

   40 EXPR_STATEMENT: TOK_SEMICOLON
   41               | EXPR TOK_SEMICOLON

   42 COMPOUND_STATEMENT: TOK_LCBRACKET TOK_RCBRACKET
   43                   | TOK_LCBRACKET STATEMENT TOK_RBRACKET

   44 SELECT_STATEMENT: TOK_IF TOK_LBRACKET EXPR TOK_RBRACKET STATEMENT
   45                 | TOK_IF TOK_LBRACKET EXPR TOK_RBRACKET STATEMENT TOK_ELSE STATEMENT

   46 ITER_STATEMENT: TOK_WHILE TOK_LBRACKET EXPR TOK_RBRACKET STATEMENT

   47 JUMP_STATEMENT: TOK_BREAK TOK_SEMICOLON
   48               | TOK_RETURN TOK_SEMICOLON
   49               | TOK_RETURN EXPR TOK_SEMICOLON


Grammar

    0 $accept: ROOT $end

    1 ROOT: EXPR

    2 EXPR: VAR_INIT

    3 VAR_INIT: ASSIGN_EXPR
    4         | VARTYPE_INT TOK_VAR TOK_SEMICOLON
    5         | VARTYPE_INT TOK_VAR TOK_EQASSIGN ASSIGN_EXPR

    6 ASSIGN_EXPR: LOGIC_EXPR
    7            | TOK_VAR TOK_EQASSIGN ASSIGN_EXPR

    8 LOGIC_EXPR: EQ_EXPR
    9           | LOGIC_EXPR TOK_BIT_AND EQ_EXPR
   10           | LOGIC_EXPR TOK_BIT_OR EQ_EXPR

   11 EQ_EXPR: REL_EXPR
   12        | EQ_EXPR TOK_EQ ADD_EXPR
   13        | EQ_EXPR TOK_NEQ ADD_EXPR

   14 REL_EXPR: ADD_EXPR
   15         | REL_EXPR TOK_LE ADD_EXPR
   16         | REL_EXPR TOK_GE ADD_EXPR
   17         | REL_EXPR TOK_G ADD_EXPR
   18         | REL_EXPR TOK_L ADD_EXPR

   19 ADD_EXPR: MULT_EXPR
   20         | ADD_EXPR TOK_PLUS MULT_EXPR
   21         | ADD_EXPR TOK_MINUS MULT_EXPR

   22 MULT_EXPR: UNARY
   23          | MULT_EXPR TOK_MUL UNARY
   24          | MULT_EXPR TOK_DIVIDE UNARY
   25          | MULT_EXPR TOK_MOD UNARY

   26 UNARY: FACTOR
   27      | TOK_MINUS UNARY

   28 FACTOR: TOK_N
   29       | TOK_VAR
   30       | TOK_LBRACKET EXPR TOK_RBRACKET


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TOK_BIT_AND (258) 9
    TOK_BIT_OR (259) 10
    TOK_EQ (260) 12
    TOK_NEQ (261) 13
    TOK_GE (262) 16
    TOK_LE (263) 15
    TOK_G (264) 17
    TOK_L (265) 18
    TOK_IF (266)
    TOK_WHILE (267)
    TOK_ELSE (268)
    TOK_RETURN (269)
    TOK_BREAK (270)
    TOK_MUL (271) 23
    TOK_DIVIDE (272) 24
    TOK_PLUS (273) 20
    TOK_MINUS (274) 21 27
    TOK_MOD (275) 25
    TOK_LBRACKET (276) 30
    TOK_RBRACKET (277) 30
    TOK_SEMICOLON (278) 4
    TOK_LCBRACKET (279)
    TOK_RCBRACKET (280)
    TOK_N <number> (281) 28
    TOK_VAR <string> (282) 4 5 7 29
    VARTYPE_INT (283) 4 5
    TOK_SUBASSIGN (284)
    TOK_MULASSIGN (285)
    TOK_DIVASSIGN (286)
    TOK_ADDASSIGN (287)
    TOK_EQASSIGN (288) 5 7


Nonterminals, with rules where they appear

    $accept (34)
        on left: 0
    ROOT (35)
        on left: 1
        on right: 0
    EXPR <expr> (36)
        on left: 2
        on right: 1 30
    VAR_INIT <expr> (37)
        on left: 3 4 5
        on right: 2
    ASSIGN_EXPR <expr> (38)
        on left: 6 7
        on right: 3 5 7
    LOGIC_EXPR <expr> (39)
        on left: 8 9 10
        on right: 6 9 10
    EQ_EXPR <expr> (40)
        on left: 11 12 13
        on right: 8 9 10 12 13
    REL_EXPR <expr> (41)
        on left: 14 15 16 17 18
        on right: 11 15 16 17 18
    ADD_EXPR <expr> (42)
        on left: 19 20 21
        on right: 12 13 14 15 16 17 18 20 21
    MULT_EXPR <expr> (43)
        on left: 22 23 24 25
        on right: 19 20 21 23 24 25
    UNARY <expr> (44)
        on left: 26 27
        on right: 22 23 24 25 27
    FACTOR <expr> (45)
        on left: 28 29 30
        on right: 26


State 0

    0 $accept: . ROOT $end

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 4
    VARTYPE_INT   shift, and go to state 5

    ROOT         go to state 6
    EXPR         go to state 7
    VAR_INIT     go to state 8
    ASSIGN_EXPR  go to state 9
    LOGIC_EXPR   go to state 10
    EQ_EXPR      go to state 11
    REL_EXPR     go to state 12
    ADD_EXPR     go to state 13
    MULT_EXPR    go to state 14
    UNARY        go to state 15
    FACTOR       go to state 16


State 1

   27 UNARY: TOK_MINUS . UNARY

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    UNARY   go to state 18
    FACTOR  go to state 16


State 2

   30 FACTOR: TOK_LBRACKET . EXPR TOK_RBRACKET

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 4
    VARTYPE_INT   shift, and go to state 5

    EXPR         go to state 19
    VAR_INIT     go to state 8
    ASSIGN_EXPR  go to state 9
    LOGIC_EXPR   go to state 10
    EQ_EXPR      go to state 11
    REL_EXPR     go to state 12
    ADD_EXPR     go to state 13
    MULT_EXPR    go to state 14
    UNARY        go to state 15
    FACTOR       go to state 16


State 3

   28 FACTOR: TOK_N .

    $default  reduce using rule 28 (FACTOR)


State 4

    7 ASSIGN_EXPR: TOK_VAR . TOK_EQASSIGN ASSIGN_EXPR
   29 FACTOR: TOK_VAR .

    TOK_EQASSIGN  shift, and go to state 20

    $default  reduce using rule 29 (FACTOR)


State 5

    4 VAR_INIT: VARTYPE_INT . TOK_VAR TOK_SEMICOLON
    5         | VARTYPE_INT . TOK_VAR TOK_EQASSIGN ASSIGN_EXPR

    TOK_VAR  shift, and go to state 21


State 6

    0 $accept: ROOT . $end

    $end  shift, and go to state 22


State 7

    1 ROOT: EXPR .

    $default  reduce using rule 1 (ROOT)


State 8

    2 EXPR: VAR_INIT .

    $default  reduce using rule 2 (EXPR)


State 9

    3 VAR_INIT: ASSIGN_EXPR .

    $default  reduce using rule 3 (VAR_INIT)


State 10

    6 ASSIGN_EXPR: LOGIC_EXPR .
    9 LOGIC_EXPR: LOGIC_EXPR . TOK_BIT_AND EQ_EXPR
   10           | LOGIC_EXPR . TOK_BIT_OR EQ_EXPR

    TOK_BIT_AND  shift, and go to state 23
    TOK_BIT_OR   shift, and go to state 24

    $default  reduce using rule 6 (ASSIGN_EXPR)


State 11

    8 LOGIC_EXPR: EQ_EXPR .
   12 EQ_EXPR: EQ_EXPR . TOK_EQ ADD_EXPR
   13        | EQ_EXPR . TOK_NEQ ADD_EXPR

    TOK_EQ   shift, and go to state 25
    TOK_NEQ  shift, and go to state 26

    $default  reduce using rule 8 (LOGIC_EXPR)


State 12

   11 EQ_EXPR: REL_EXPR .
   15 REL_EXPR: REL_EXPR . TOK_LE ADD_EXPR
   16         | REL_EXPR . TOK_GE ADD_EXPR
   17         | REL_EXPR . TOK_G ADD_EXPR
   18         | REL_EXPR . TOK_L ADD_EXPR

    TOK_GE  shift, and go to state 27
    TOK_LE  shift, and go to state 28
    TOK_G   shift, and go to state 29
    TOK_L   shift, and go to state 30

    $default  reduce using rule 11 (EQ_EXPR)


State 13

   14 REL_EXPR: ADD_EXPR .
   20 ADD_EXPR: ADD_EXPR . TOK_PLUS MULT_EXPR
   21         | ADD_EXPR . TOK_MINUS MULT_EXPR

    TOK_PLUS   shift, and go to state 31
    TOK_MINUS  shift, and go to state 32

    $default  reduce using rule 14 (REL_EXPR)


State 14

   19 ADD_EXPR: MULT_EXPR .
   23 MULT_EXPR: MULT_EXPR . TOK_MUL UNARY
   24          | MULT_EXPR . TOK_DIVIDE UNARY
   25          | MULT_EXPR . TOK_MOD UNARY

    TOK_MUL     shift, and go to state 33
    TOK_DIVIDE  shift, and go to state 34
    TOK_MOD     shift, and go to state 35

    $default  reduce using rule 19 (ADD_EXPR)


State 15

   22 MULT_EXPR: UNARY .

    $default  reduce using rule 22 (MULT_EXPR)


State 16

   26 UNARY: FACTOR .

    $default  reduce using rule 26 (UNARY)


State 17

   29 FACTOR: TOK_VAR .

    $default  reduce using rule 29 (FACTOR)


State 18

   27 UNARY: TOK_MINUS UNARY .

    $default  reduce using rule 27 (UNARY)


State 19

   30 FACTOR: TOK_LBRACKET EXPR . TOK_RBRACKET

    TOK_RBRACKET  shift, and go to state 36


State 20

    7 ASSIGN_EXPR: TOK_VAR TOK_EQASSIGN . ASSIGN_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 4

    ASSIGN_EXPR  go to state 37
    LOGIC_EXPR   go to state 10
    EQ_EXPR      go to state 11
    REL_EXPR     go to state 12
    ADD_EXPR     go to state 13
    MULT_EXPR    go to state 14
    UNARY        go to state 15
    FACTOR       go to state 16


State 21

    4 VAR_INIT: VARTYPE_INT TOK_VAR . TOK_SEMICOLON
    5         | VARTYPE_INT TOK_VAR . TOK_EQASSIGN ASSIGN_EXPR

    TOK_SEMICOLON  shift, and go to state 38
    TOK_EQASSIGN   shift, and go to state 39


State 22

    0 $accept: ROOT $end .

    $default  accept


State 23

    9 LOGIC_EXPR: LOGIC_EXPR TOK_BIT_AND . EQ_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    EQ_EXPR    go to state 40
    REL_EXPR   go to state 12
    ADD_EXPR   go to state 13
    MULT_EXPR  go to state 14
    UNARY      go to state 15
    FACTOR     go to state 16


State 24

   10 LOGIC_EXPR: LOGIC_EXPR TOK_BIT_OR . EQ_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    EQ_EXPR    go to state 41
    REL_EXPR   go to state 12
    ADD_EXPR   go to state 13
    MULT_EXPR  go to state 14
    UNARY      go to state 15
    FACTOR     go to state 16


State 25

   12 EQ_EXPR: EQ_EXPR TOK_EQ . ADD_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    ADD_EXPR   go to state 42
    MULT_EXPR  go to state 14
    UNARY      go to state 15
    FACTOR     go to state 16


State 26

   13 EQ_EXPR: EQ_EXPR TOK_NEQ . ADD_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    ADD_EXPR   go to state 43
    MULT_EXPR  go to state 14
    UNARY      go to state 15
    FACTOR     go to state 16


State 27

   16 REL_EXPR: REL_EXPR TOK_GE . ADD_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    ADD_EXPR   go to state 44
    MULT_EXPR  go to state 14
    UNARY      go to state 15
    FACTOR     go to state 16


State 28

   15 REL_EXPR: REL_EXPR TOK_LE . ADD_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    ADD_EXPR   go to state 45
    MULT_EXPR  go to state 14
    UNARY      go to state 15
    FACTOR     go to state 16


State 29

   17 REL_EXPR: REL_EXPR TOK_G . ADD_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    ADD_EXPR   go to state 46
    MULT_EXPR  go to state 14
    UNARY      go to state 15
    FACTOR     go to state 16


State 30

   18 REL_EXPR: REL_EXPR TOK_L . ADD_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    ADD_EXPR   go to state 47
    MULT_EXPR  go to state 14
    UNARY      go to state 15
    FACTOR     go to state 16


State 31

   20 ADD_EXPR: ADD_EXPR TOK_PLUS . MULT_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    MULT_EXPR  go to state 48
    UNARY      go to state 15
    FACTOR     go to state 16


State 32

   21 ADD_EXPR: ADD_EXPR TOK_MINUS . MULT_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    MULT_EXPR  go to state 49
    UNARY      go to state 15
    FACTOR     go to state 16


State 33

   23 MULT_EXPR: MULT_EXPR TOK_MUL . UNARY

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    UNARY   go to state 50
    FACTOR  go to state 16


State 34

   24 MULT_EXPR: MULT_EXPR TOK_DIVIDE . UNARY

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    UNARY   go to state 51
    FACTOR  go to state 16


State 35

   25 MULT_EXPR: MULT_EXPR TOK_MOD . UNARY

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 17

    UNARY   go to state 52
    FACTOR  go to state 16


State 36

   30 FACTOR: TOK_LBRACKET EXPR TOK_RBRACKET .

    $default  reduce using rule 30 (FACTOR)


State 37

    7 ASSIGN_EXPR: TOK_VAR TOK_EQASSIGN ASSIGN_EXPR .

    $default  reduce using rule 7 (ASSIGN_EXPR)


State 38

    4 VAR_INIT: VARTYPE_INT TOK_VAR TOK_SEMICOLON .

    $default  reduce using rule 4 (VAR_INIT)


State 39

    5 VAR_INIT: VARTYPE_INT TOK_VAR TOK_EQASSIGN . ASSIGN_EXPR

    TOK_MINUS     shift, and go to state 1
    TOK_LBRACKET  shift, and go to state 2
    TOK_N         shift, and go to state 3
    TOK_VAR       shift, and go to state 4

    ASSIGN_EXPR  go to state 53
    LOGIC_EXPR   go to state 10
    EQ_EXPR      go to state 11
    REL_EXPR     go to state 12
    ADD_EXPR     go to state 13
    MULT_EXPR    go to state 14
    UNARY        go to state 15
    FACTOR       go to state 16


State 40

    9 LOGIC_EXPR: LOGIC_EXPR TOK_BIT_AND EQ_EXPR .
   12 EQ_EXPR: EQ_EXPR . TOK_EQ ADD_EXPR
   13        | EQ_EXPR . TOK_NEQ ADD_EXPR

    TOK_EQ   shift, and go to state 25
    TOK_NEQ  shift, and go to state 26

    $default  reduce using rule 9 (LOGIC_EXPR)


State 41

   10 LOGIC_EXPR: LOGIC_EXPR TOK_BIT_OR EQ_EXPR .
   12 EQ_EXPR: EQ_EXPR . TOK_EQ ADD_EXPR
   13        | EQ_EXPR . TOK_NEQ ADD_EXPR

    TOK_EQ   shift, and go to state 25
    TOK_NEQ  shift, and go to state 26

    $default  reduce using rule 10 (LOGIC_EXPR)


State 42

   12 EQ_EXPR: EQ_EXPR TOK_EQ ADD_EXPR .
   20 ADD_EXPR: ADD_EXPR . TOK_PLUS MULT_EXPR
   21         | ADD_EXPR . TOK_MINUS MULT_EXPR

    TOK_PLUS   shift, and go to state 31
    TOK_MINUS  shift, and go to state 32

    $default  reduce using rule 12 (EQ_EXPR)


State 43

   13 EQ_EXPR: EQ_EXPR TOK_NEQ ADD_EXPR .
   20 ADD_EXPR: ADD_EXPR . TOK_PLUS MULT_EXPR
   21         | ADD_EXPR . TOK_MINUS MULT_EXPR

    TOK_PLUS   shift, and go to state 31
    TOK_MINUS  shift, and go to state 32

    $default  reduce using rule 13 (EQ_EXPR)


State 44

   16 REL_EXPR: REL_EXPR TOK_GE ADD_EXPR .
   20 ADD_EXPR: ADD_EXPR . TOK_PLUS MULT_EXPR
   21         | ADD_EXPR . TOK_MINUS MULT_EXPR

    TOK_PLUS   shift, and go to state 31
    TOK_MINUS  shift, and go to state 32

    $default  reduce using rule 16 (REL_EXPR)


State 45

   15 REL_EXPR: REL_EXPR TOK_LE ADD_EXPR .
   20 ADD_EXPR: ADD_EXPR . TOK_PLUS MULT_EXPR
   21         | ADD_EXPR . TOK_MINUS MULT_EXPR

    TOK_PLUS   shift, and go to state 31
    TOK_MINUS  shift, and go to state 32

    $default  reduce using rule 15 (REL_EXPR)


State 46

   17 REL_EXPR: REL_EXPR TOK_G ADD_EXPR .
   20 ADD_EXPR: ADD_EXPR . TOK_PLUS MULT_EXPR
   21         | ADD_EXPR . TOK_MINUS MULT_EXPR

    TOK_PLUS   shift, and go to state 31
    TOK_MINUS  shift, and go to state 32

    $default  reduce using rule 17 (REL_EXPR)


State 47

   18 REL_EXPR: REL_EXPR TOK_L ADD_EXPR .
   20 ADD_EXPR: ADD_EXPR . TOK_PLUS MULT_EXPR
   21         | ADD_EXPR . TOK_MINUS MULT_EXPR

    TOK_PLUS   shift, and go to state 31
    TOK_MINUS  shift, and go to state 32

    $default  reduce using rule 18 (REL_EXPR)


State 48

   20 ADD_EXPR: ADD_EXPR TOK_PLUS MULT_EXPR .
   23 MULT_EXPR: MULT_EXPR . TOK_MUL UNARY
   24          | MULT_EXPR . TOK_DIVIDE UNARY
   25          | MULT_EXPR . TOK_MOD UNARY

    TOK_MUL     shift, and go to state 33
    TOK_DIVIDE  shift, and go to state 34
    TOK_MOD     shift, and go to state 35

    $default  reduce using rule 20 (ADD_EXPR)


State 49

   21 ADD_EXPR: ADD_EXPR TOK_MINUS MULT_EXPR .
   23 MULT_EXPR: MULT_EXPR . TOK_MUL UNARY
   24          | MULT_EXPR . TOK_DIVIDE UNARY
   25          | MULT_EXPR . TOK_MOD UNARY

    TOK_MUL     shift, and go to state 33
    TOK_DIVIDE  shift, and go to state 34
    TOK_MOD     shift, and go to state 35

    $default  reduce using rule 21 (ADD_EXPR)


State 50

   23 MULT_EXPR: MULT_EXPR TOK_MUL UNARY .

    $default  reduce using rule 23 (MULT_EXPR)


State 51

   24 MULT_EXPR: MULT_EXPR TOK_DIVIDE UNARY .

    $default  reduce using rule 24 (MULT_EXPR)


State 52

   25 MULT_EXPR: MULT_EXPR TOK_MOD UNARY .

    $default  reduce using rule 25 (MULT_EXPR)


State 53

    5 VAR_INIT: VARTYPE_INT TOK_VAR TOK_EQASSIGN ASSIGN_EXPR .

    $default  reduce using rule 5 (VAR_INIT)
