State 115 conflicts: 1 shift/reduce
State 151 conflicts: 1 shift/reduce


Grammar

    0 $accept: ROOT $end

    1 ROOT: EXPR_TREE

    2 EXPR_TREE: EXPR
    3          | EXPR_TREE EXPR

    4 EXPR: FUNCTION
    5     | DECLARATION

    6 FUNCTION: VARTYPE_INT DECLARATOR TOK_LBRACKET FUNC_ARGS TOK_RBRACKET FUNC_STATEMENT
    7         | VARTYPE_INT DECLARATOR TOK_LBRACKET TOK_RBRACKET FUNC_STATEMENT

    8 REC_DECLARATION: DECLARATION
    9                | REC_DECLARATION DECLARATION

   10 DECLARATION: VARTYPE_INT DECLARATOR TOK_SEMICOLON
   11            | VARTYPE_INT DECLARATOR TOK_EQASSIGN ASSIGN_EXPR TOK_SEMICOLON
   12            | VARTYPE_INT DECLARATOR TOK_EQASSIGN TOK_LCBRACKET TOK_RCBRACKET TOK_SEMICOLON
   13            | VARTYPE_INT DECLARATOR TOK_EQASSIGN TOK_LCBRACKET FUNC_CALL_ARGS TOK_RCBRACKET TOK_SEMICOLON

   14 FUNC_ARGS: VARTYPE_INT DECLARATOR
   15          | FUNC_ARGS TOK_COMMA FUNC_ARGS

   16 FUNC_CALL_ARGS: ASSIGN_EXPR
   17               | FUNC_CALL_ARGS TOK_COMMA ASSIGN_EXPR

   18 DECLARATOR: TOK_VAR
   19           | TOK_VAR TOK_LSQBRACKET LOGIC_EXPR TOK_RSQBRACKET
   20           | TOK_VAR TOK_LSQBRACKET TOK_RSQBRACKET

   21 ASSIGN_EXPR: LOGIC_EXPR
   22            | TOK_VAR TOK_EQASSIGN ASSIGN_EXPR
   23            | TOK_VAR TOK_ADDASSIGN ASSIGN_EXPR
   24            | TOK_VAR TOK_SUBASSIGN ASSIGN_EXPR
   25            | TOK_VAR TOK_MULASSIGN ASSIGN_EXPR
   26            | TOK_VAR TOK_DIVASSIGN ASSIGN_EXPR
   27            | TOK_VAR TOK_MODASSIGN ASSIGN_EXPR

   28 LOGIC_EXPR: BIT_EXPR
   29           | LOGIC_EXPR TOK_LOGIC_AND BIT_EXPR
   30           | LOGIC_EXPR TOK_LOGIC_OR BIT_EXPR

   31 BIT_EXPR: EQ_EXPR
   32         | BIT_EXPR TOK_BIT_AND EQ_EXPR
   33         | BIT_EXPR TOK_BIT_OR EQ_EXPR
   34         | BIT_EXPR TOK_BIT_XOR EQ_EXPR

   35 EQ_EXPR: REL_EXPR
   36        | EQ_EXPR TOK_EQ REL_EXPR
   37        | EQ_EXPR TOK_NEQ REL_EXPR

   38 REL_EXPR: SHIFT_EXPR
   39         | REL_EXPR TOK_LE SHIFT_EXPR
   40         | REL_EXPR TOK_GE SHIFT_EXPR
   41         | REL_EXPR TOK_G SHIFT_EXPR
   42         | REL_EXPR TOK_L SHIFT_EXPR

   43 SHIFT_EXPR: ADD_EXPR
   44           | SHIFT_EXPR TOK_LSHIFT ADD_EXPR
   45           | SHIFT_EXPR TOK_RSHIFT ADD_EXPR

   46 ADD_EXPR: MULT_EXPR
   47         | ADD_EXPR TOK_PLUS MULT_EXPR
   48         | ADD_EXPR TOK_MINUS MULT_EXPR

   49 MULT_EXPR: UNARY
   50          | MULT_EXPR TOK_MUL UNARY
   51          | MULT_EXPR TOK_DIVIDE UNARY
   52          | MULT_EXPR TOK_MOD UNARY

   53 UNARY: FACTOR
   54      | TOK_MINUS UNARY
   55      | TOK_LOGIC_NOT UNARY
   56      | TOK_BIT_NOT UNARY

   57 FACTOR: TOK_N
   58       | TOK_VAR
   59       | TOK_LBRACKET ASSIGN_EXPR TOK_RBRACKET
   60       | TOK_VAR TOK_LBRACKET TOK_RBRACKET
   61       | TOK_VAR TOK_LBRACKET FUNC_CALL_ARGS TOK_RBRACKET

   62 REC_STATEMENT: STATEMENT
   63              | REC_STATEMENT STATEMENT

   64 STATEMENT: EXPR_STATEMENT
   65          | ITER_STATEMENT
   66          | JUMP_STATEMENT
   67          | SELECT_STATEMENT
   68          | FUNC_STATEMENT

   69 EXPR_STATEMENT: ASSIGN_EXPR TOK_SEMICOLON

   70 FUNC_STATEMENT: TOK_LCBRACKET REC_STATEMENT TOK_RCBRACKET
   71               | TOK_LCBRACKET REC_DECLARATION TOK_RCBRACKET
   72               | TOK_LCBRACKET REC_DECLARATION REC_STATEMENT TOK_RCBRACKET

   73 SELECT_STATEMENT: TOK_IF TOK_LBRACKET LOGIC_EXPR TOK_RBRACKET STATEMENT
   74                 | TOK_IF TOK_LBRACKET LOGIC_EXPR TOK_RBRACKET STATEMENT TOK_ELSE STATEMENT

   75 ITER_STATEMENT: TOK_WHILE TOK_LBRACKET EXPR TOK_RBRACKET STATEMENT

   76 JUMP_STATEMENT: TOK_BREAK TOK_SEMICOLON
   77               | TOK_CONT TOK_SEMICOLON
   78               | TOK_RETURN TOK_SEMICOLON
   79               | TOK_RETURN FUNCTION TOK_SEMICOLON
   80               | TOK_RETURN LOGIC_EXPR TOK_SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TOK_BIT_AND (258) 32
    TOK_BIT_OR (259) 33
    TOK_EQ (260) 36
    TOK_NEQ (261) 37
    TOK_BIT_XOR (262) 34
    TOK_LOGIC_AND (263) 29
    TOK_LOGIC_OR (264) 30
    TOK_LSHIFT (265) 44
    TOK_RSHIFT (266) 45
    TOK_LOGIC_NOT (267) 55
    TOK_BIT_NOT (268) 56
    TOK_GE (269) 40
    TOK_LE (270) 39
    TOK_G (271) 41
    TOK_L (272) 42
    TOK_IF (273) 73 74
    TOK_WHILE (274) 75
    TOK_ELSE (275) 74
    TOK_RETURN (276) 78 79 80
    TOK_BREAK (277) 76
    TOK_CONT (278) 77
    TOK_MUL (279) 50
    TOK_DIVIDE (280) 51
    TOK_PLUS (281) 47
    TOK_MINUS (282) 48 54
    TOK_MOD (283) 52
    TOK_LBRACKET (284) 6 7 59 60 61 73 74 75
    TOK_RBRACKET (285) 6 7 59 60 61 73 74 75
    TOK_SEMICOLON (286) 10 11 12 13 69 76 77 78 79 80
    TOK_LCBRACKET (287) 12 13 70 71 72
    TOK_RCBRACKET (288) 12 13 70 71 72
    TOK_LSQBRACKET (289) 19 20
    TOK_RSQBRACKET (290) 19 20
    TOK_COMMA (291) 15 17
    TOK_N <number> (292) 57
    TOK_VAR <string> (293) 18 19 20 22 23 24 25 26 27 58 60 61
    VARTYPE_INT <string> (294) 6 7 10 11 12 13 14
    TOK_SUBASSIGN (295) 24
    TOK_MULASSIGN (296) 25
    TOK_DIVASSIGN (297) 26
    TOK_ADDASSIGN (298) 23
    TOK_EQASSIGN (299) 11 12 13 22
    TOK_MODASSIGN (300) 27


Nonterminals, with rules where they appear

    $accept (46)
        on left: 0
    ROOT <expr> (47)
        on left: 1
        on right: 0
    EXPR_TREE <expr> (48)
        on left: 2 3
        on right: 1 3
    EXPR <expr> (49)
        on left: 4 5
        on right: 2 3 75
    FUNCTION <expr> (50)
        on left: 6 7
        on right: 4 79
    REC_DECLARATION <expr> (51)
        on left: 8 9
        on right: 9 71 72
    DECLARATION <expr> (52)
        on left: 10 11 12 13
        on right: 5 8 9
    FUNC_ARGS <expr> (53)
        on left: 14 15
        on right: 6 15
    FUNC_CALL_ARGS <expr> (54)
        on left: 16 17
        on right: 13 17 61
    DECLARATOR <expr> (55)
        on left: 18 19 20
        on right: 6 7 10 11 12 13 14
    ASSIGN_EXPR <expr> (56)
        on left: 21 22 23 24 25 26 27
        on right: 11 16 17 22 23 24 25 26 27 59 69
    LOGIC_EXPR <expr> (57)
        on left: 28 29 30
        on right: 19 21 29 30 73 74 80
    BIT_EXPR <expr> (58)
        on left: 31 32 33 34
        on right: 28 29 30 32 33 34
    EQ_EXPR <expr> (59)
        on left: 35 36 37
        on right: 31 32 33 34 36 37
    REL_EXPR <expr> (60)
        on left: 38 39 40 41 42
        on right: 35 36 37 39 40 41 42
    SHIFT_EXPR <expr> (61)
        on left: 43 44 45
        on right: 38 39 40 41 42 44 45
    ADD_EXPR <expr> (62)
        on left: 46 47 48
        on right: 43 44 45 47 48
    MULT_EXPR <expr> (63)
        on left: 49 50 51 52
        on right: 46 47 48 50 51 52
    UNARY <expr> (64)
        on left: 53 54 55 56
        on right: 49 50 51 52 54 55 56
    FACTOR <expr> (65)
        on left: 57 58 59 60 61
        on right: 53
    REC_STATEMENT <expr> (66)
        on left: 62 63
        on right: 63 70 72
    STATEMENT <expr> (67)
        on left: 64 65 66 67 68
        on right: 62 63 73 74 75
    EXPR_STATEMENT <expr> (68)
        on left: 69
        on right: 64
    FUNC_STATEMENT <expr> (69)
        on left: 70 71 72
        on right: 6 7 68
    SELECT_STATEMENT <expr> (70)
        on left: 73 74
        on right: 67
    ITER_STATEMENT <expr> (71)
        on left: 75
        on right: 65
    JUMP_STATEMENT <expr> (72)
        on left: 76 77 78 79 80
        on right: 66


State 0

    0 $accept: . ROOT $end

    VARTYPE_INT  shift, and go to state 1

    ROOT         go to state 2
    EXPR_TREE    go to state 3
    EXPR         go to state 4
    FUNCTION     go to state 5
    DECLARATION  go to state 6


State 1

    6 FUNCTION: VARTYPE_INT . DECLARATOR TOK_LBRACKET FUNC_ARGS TOK_RBRACKET FUNC_STATEMENT
    7         | VARTYPE_INT . DECLARATOR TOK_LBRACKET TOK_RBRACKET FUNC_STATEMENT
   10 DECLARATION: VARTYPE_INT . DECLARATOR TOK_SEMICOLON
   11            | VARTYPE_INT . DECLARATOR TOK_EQASSIGN ASSIGN_EXPR TOK_SEMICOLON
   12            | VARTYPE_INT . DECLARATOR TOK_EQASSIGN TOK_LCBRACKET TOK_RCBRACKET TOK_SEMICOLON
   13            | VARTYPE_INT . DECLARATOR TOK_EQASSIGN TOK_LCBRACKET FUNC_CALL_ARGS TOK_RCBRACKET TOK_SEMICOLON

    TOK_VAR  shift, and go to state 7

    DECLARATOR  go to state 8


State 2

    0 $accept: ROOT . $end

    $end  shift, and go to state 9


State 3

    1 ROOT: EXPR_TREE .
    3 EXPR_TREE: EXPR_TREE . EXPR

    VARTYPE_INT  shift, and go to state 1

    $default  reduce using rule 1 (ROOT)

    EXPR         go to state 10
    FUNCTION     go to state 5
    DECLARATION  go to state 6


State 4

    2 EXPR_TREE: EXPR .

    $default  reduce using rule 2 (EXPR_TREE)


State 5

    4 EXPR: FUNCTION .

    $default  reduce using rule 4 (EXPR)


State 6

    5 EXPR: DECLARATION .

    $default  reduce using rule 5 (EXPR)


State 7

   18 DECLARATOR: TOK_VAR .
   19           | TOK_VAR . TOK_LSQBRACKET LOGIC_EXPR TOK_RSQBRACKET
   20           | TOK_VAR . TOK_LSQBRACKET TOK_RSQBRACKET

    TOK_LSQBRACKET  shift, and go to state 11

    $default  reduce using rule 18 (DECLARATOR)


State 8

    6 FUNCTION: VARTYPE_INT DECLARATOR . TOK_LBRACKET FUNC_ARGS TOK_RBRACKET FUNC_STATEMENT
    7         | VARTYPE_INT DECLARATOR . TOK_LBRACKET TOK_RBRACKET FUNC_STATEMENT
   10 DECLARATION: VARTYPE_INT DECLARATOR . TOK_SEMICOLON
   11            | VARTYPE_INT DECLARATOR . TOK_EQASSIGN ASSIGN_EXPR TOK_SEMICOLON
   12            | VARTYPE_INT DECLARATOR . TOK_EQASSIGN TOK_LCBRACKET TOK_RCBRACKET TOK_SEMICOLON
   13            | VARTYPE_INT DECLARATOR . TOK_EQASSIGN TOK_LCBRACKET FUNC_CALL_ARGS TOK_RCBRACKET TOK_SEMICOLON

    TOK_LBRACKET   shift, and go to state 12
    TOK_SEMICOLON  shift, and go to state 13
    TOK_EQASSIGN   shift, and go to state 14


State 9

    0 $accept: ROOT $end .

    $default  accept


State 10

    3 EXPR_TREE: EXPR_TREE EXPR .

    $default  reduce using rule 3 (EXPR_TREE)


State 11

   19 DECLARATOR: TOK_VAR TOK_LSQBRACKET . LOGIC_EXPR TOK_RSQBRACKET
   20           | TOK_VAR TOK_LSQBRACKET . TOK_RSQBRACKET

    TOK_LOGIC_NOT   shift, and go to state 15
    TOK_BIT_NOT     shift, and go to state 16
    TOK_MINUS       shift, and go to state 17
    TOK_LBRACKET    shift, and go to state 18
    TOK_RSQBRACKET  shift, and go to state 19
    TOK_N           shift, and go to state 20
    TOK_VAR         shift, and go to state 21

    LOGIC_EXPR  go to state 22
    BIT_EXPR    go to state 23
    EQ_EXPR     go to state 24
    REL_EXPR    go to state 25
    SHIFT_EXPR  go to state 26
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 12

    6 FUNCTION: VARTYPE_INT DECLARATOR TOK_LBRACKET . FUNC_ARGS TOK_RBRACKET FUNC_STATEMENT
    7         | VARTYPE_INT DECLARATOR TOK_LBRACKET . TOK_RBRACKET FUNC_STATEMENT

    TOK_RBRACKET  shift, and go to state 31
    VARTYPE_INT   shift, and go to state 32

    FUNC_ARGS  go to state 33


State 13

   10 DECLARATION: VARTYPE_INT DECLARATOR TOK_SEMICOLON .

    $default  reduce using rule 10 (DECLARATION)


State 14

   11 DECLARATION: VARTYPE_INT DECLARATOR TOK_EQASSIGN . ASSIGN_EXPR TOK_SEMICOLON
   12            | VARTYPE_INT DECLARATOR TOK_EQASSIGN . TOK_LCBRACKET TOK_RCBRACKET TOK_SEMICOLON
   13            | VARTYPE_INT DECLARATOR TOK_EQASSIGN . TOK_LCBRACKET FUNC_CALL_ARGS TOK_RCBRACKET TOK_SEMICOLON

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_LCBRACKET  shift, and go to state 34
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR  go to state 36
    LOGIC_EXPR   go to state 37
    BIT_EXPR     go to state 23
    EQ_EXPR      go to state 24
    REL_EXPR     go to state 25
    SHIFT_EXPR   go to state 26
    ADD_EXPR     go to state 27
    MULT_EXPR    go to state 28
    UNARY        go to state 29
    FACTOR       go to state 30


State 15

   55 UNARY: TOK_LOGIC_NOT . UNARY

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    UNARY   go to state 38
    FACTOR  go to state 30


State 16

   56 UNARY: TOK_BIT_NOT . UNARY

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    UNARY   go to state 39
    FACTOR  go to state 30


State 17

   54 UNARY: TOK_MINUS . UNARY

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    UNARY   go to state 40
    FACTOR  go to state 30


State 18

   59 FACTOR: TOK_LBRACKET . ASSIGN_EXPR TOK_RBRACKET

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR  go to state 41
    LOGIC_EXPR   go to state 37
    BIT_EXPR     go to state 23
    EQ_EXPR      go to state 24
    REL_EXPR     go to state 25
    SHIFT_EXPR   go to state 26
    ADD_EXPR     go to state 27
    MULT_EXPR    go to state 28
    UNARY        go to state 29
    FACTOR       go to state 30


State 19

   20 DECLARATOR: TOK_VAR TOK_LSQBRACKET TOK_RSQBRACKET .

    $default  reduce using rule 20 (DECLARATOR)


State 20

   57 FACTOR: TOK_N .

    $default  reduce using rule 57 (FACTOR)


State 21

   58 FACTOR: TOK_VAR .
   60       | TOK_VAR . TOK_LBRACKET TOK_RBRACKET
   61       | TOK_VAR . TOK_LBRACKET FUNC_CALL_ARGS TOK_RBRACKET

    TOK_LBRACKET  shift, and go to state 42

    $default  reduce using rule 58 (FACTOR)


State 22

   19 DECLARATOR: TOK_VAR TOK_LSQBRACKET LOGIC_EXPR . TOK_RSQBRACKET
   29 LOGIC_EXPR: LOGIC_EXPR . TOK_LOGIC_AND BIT_EXPR
   30           | LOGIC_EXPR . TOK_LOGIC_OR BIT_EXPR

    TOK_LOGIC_AND   shift, and go to state 43
    TOK_LOGIC_OR    shift, and go to state 44
    TOK_RSQBRACKET  shift, and go to state 45


State 23

   28 LOGIC_EXPR: BIT_EXPR .
   32 BIT_EXPR: BIT_EXPR . TOK_BIT_AND EQ_EXPR
   33         | BIT_EXPR . TOK_BIT_OR EQ_EXPR
   34         | BIT_EXPR . TOK_BIT_XOR EQ_EXPR

    TOK_BIT_AND  shift, and go to state 46
    TOK_BIT_OR   shift, and go to state 47
    TOK_BIT_XOR  shift, and go to state 48

    $default  reduce using rule 28 (LOGIC_EXPR)


State 24

   31 BIT_EXPR: EQ_EXPR .
   36 EQ_EXPR: EQ_EXPR . TOK_EQ REL_EXPR
   37        | EQ_EXPR . TOK_NEQ REL_EXPR

    TOK_EQ   shift, and go to state 49
    TOK_NEQ  shift, and go to state 50

    $default  reduce using rule 31 (BIT_EXPR)


State 25

   35 EQ_EXPR: REL_EXPR .
   39 REL_EXPR: REL_EXPR . TOK_LE SHIFT_EXPR
   40         | REL_EXPR . TOK_GE SHIFT_EXPR
   41         | REL_EXPR . TOK_G SHIFT_EXPR
   42         | REL_EXPR . TOK_L SHIFT_EXPR

    TOK_GE  shift, and go to state 51
    TOK_LE  shift, and go to state 52
    TOK_G   shift, and go to state 53
    TOK_L   shift, and go to state 54

    $default  reduce using rule 35 (EQ_EXPR)


State 26

   38 REL_EXPR: SHIFT_EXPR .
   44 SHIFT_EXPR: SHIFT_EXPR . TOK_LSHIFT ADD_EXPR
   45           | SHIFT_EXPR . TOK_RSHIFT ADD_EXPR

    TOK_LSHIFT  shift, and go to state 55
    TOK_RSHIFT  shift, and go to state 56

    $default  reduce using rule 38 (REL_EXPR)


State 27

   43 SHIFT_EXPR: ADD_EXPR .
   47 ADD_EXPR: ADD_EXPR . TOK_PLUS MULT_EXPR
   48         | ADD_EXPR . TOK_MINUS MULT_EXPR

    TOK_PLUS   shift, and go to state 57
    TOK_MINUS  shift, and go to state 58

    $default  reduce using rule 43 (SHIFT_EXPR)


State 28

   46 ADD_EXPR: MULT_EXPR .
   50 MULT_EXPR: MULT_EXPR . TOK_MUL UNARY
   51          | MULT_EXPR . TOK_DIVIDE UNARY
   52          | MULT_EXPR . TOK_MOD UNARY

    TOK_MUL     shift, and go to state 59
    TOK_DIVIDE  shift, and go to state 60
    TOK_MOD     shift, and go to state 61

    $default  reduce using rule 46 (ADD_EXPR)


State 29

   49 MULT_EXPR: UNARY .

    $default  reduce using rule 49 (MULT_EXPR)


State 30

   53 UNARY: FACTOR .

    $default  reduce using rule 53 (UNARY)


State 31

    7 FUNCTION: VARTYPE_INT DECLARATOR TOK_LBRACKET TOK_RBRACKET . FUNC_STATEMENT

    TOK_LCBRACKET  shift, and go to state 62

    FUNC_STATEMENT  go to state 63


State 32

   14 FUNC_ARGS: VARTYPE_INT . DECLARATOR

    TOK_VAR  shift, and go to state 7

    DECLARATOR  go to state 64


State 33

    6 FUNCTION: VARTYPE_INT DECLARATOR TOK_LBRACKET FUNC_ARGS . TOK_RBRACKET FUNC_STATEMENT
   15 FUNC_ARGS: FUNC_ARGS . TOK_COMMA FUNC_ARGS

    TOK_RBRACKET  shift, and go to state 65
    TOK_COMMA     shift, and go to state 66


State 34

   12 DECLARATION: VARTYPE_INT DECLARATOR TOK_EQASSIGN TOK_LCBRACKET . TOK_RCBRACKET TOK_SEMICOLON
   13            | VARTYPE_INT DECLARATOR TOK_EQASSIGN TOK_LCBRACKET . FUNC_CALL_ARGS TOK_RCBRACKET TOK_SEMICOLON

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_RCBRACKET  shift, and go to state 67
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    FUNC_CALL_ARGS  go to state 68
    ASSIGN_EXPR     go to state 69
    LOGIC_EXPR      go to state 37
    BIT_EXPR        go to state 23
    EQ_EXPR         go to state 24
    REL_EXPR        go to state 25
    SHIFT_EXPR      go to state 26
    ADD_EXPR        go to state 27
    MULT_EXPR       go to state 28
    UNARY           go to state 29
    FACTOR          go to state 30


State 35

   22 ASSIGN_EXPR: TOK_VAR . TOK_EQASSIGN ASSIGN_EXPR
   23            | TOK_VAR . TOK_ADDASSIGN ASSIGN_EXPR
   24            | TOK_VAR . TOK_SUBASSIGN ASSIGN_EXPR
   25            | TOK_VAR . TOK_MULASSIGN ASSIGN_EXPR
   26            | TOK_VAR . TOK_DIVASSIGN ASSIGN_EXPR
   27            | TOK_VAR . TOK_MODASSIGN ASSIGN_EXPR
   58 FACTOR: TOK_VAR .
   60       | TOK_VAR . TOK_LBRACKET TOK_RBRACKET
   61       | TOK_VAR . TOK_LBRACKET FUNC_CALL_ARGS TOK_RBRACKET

    TOK_LBRACKET   shift, and go to state 42
    TOK_SUBASSIGN  shift, and go to state 70
    TOK_MULASSIGN  shift, and go to state 71
    TOK_DIVASSIGN  shift, and go to state 72
    TOK_ADDASSIGN  shift, and go to state 73
    TOK_EQASSIGN   shift, and go to state 74
    TOK_MODASSIGN  shift, and go to state 75

    $default  reduce using rule 58 (FACTOR)


State 36

   11 DECLARATION: VARTYPE_INT DECLARATOR TOK_EQASSIGN ASSIGN_EXPR . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 76


State 37

   21 ASSIGN_EXPR: LOGIC_EXPR .
   29 LOGIC_EXPR: LOGIC_EXPR . TOK_LOGIC_AND BIT_EXPR
   30           | LOGIC_EXPR . TOK_LOGIC_OR BIT_EXPR

    TOK_LOGIC_AND  shift, and go to state 43
    TOK_LOGIC_OR   shift, and go to state 44

    $default  reduce using rule 21 (ASSIGN_EXPR)


State 38

   55 UNARY: TOK_LOGIC_NOT UNARY .

    $default  reduce using rule 55 (UNARY)


State 39

   56 UNARY: TOK_BIT_NOT UNARY .

    $default  reduce using rule 56 (UNARY)


State 40

   54 UNARY: TOK_MINUS UNARY .

    $default  reduce using rule 54 (UNARY)


State 41

   59 FACTOR: TOK_LBRACKET ASSIGN_EXPR . TOK_RBRACKET

    TOK_RBRACKET  shift, and go to state 77


State 42

   60 FACTOR: TOK_VAR TOK_LBRACKET . TOK_RBRACKET
   61       | TOK_VAR TOK_LBRACKET . FUNC_CALL_ARGS TOK_RBRACKET

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_RBRACKET   shift, and go to state 78
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    FUNC_CALL_ARGS  go to state 79
    ASSIGN_EXPR     go to state 69
    LOGIC_EXPR      go to state 37
    BIT_EXPR        go to state 23
    EQ_EXPR         go to state 24
    REL_EXPR        go to state 25
    SHIFT_EXPR      go to state 26
    ADD_EXPR        go to state 27
    MULT_EXPR       go to state 28
    UNARY           go to state 29
    FACTOR          go to state 30


State 43

   29 LOGIC_EXPR: LOGIC_EXPR TOK_LOGIC_AND . BIT_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    BIT_EXPR    go to state 80
    EQ_EXPR     go to state 24
    REL_EXPR    go to state 25
    SHIFT_EXPR  go to state 26
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 44

   30 LOGIC_EXPR: LOGIC_EXPR TOK_LOGIC_OR . BIT_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    BIT_EXPR    go to state 81
    EQ_EXPR     go to state 24
    REL_EXPR    go to state 25
    SHIFT_EXPR  go to state 26
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 45

   19 DECLARATOR: TOK_VAR TOK_LSQBRACKET LOGIC_EXPR TOK_RSQBRACKET .

    $default  reduce using rule 19 (DECLARATOR)


State 46

   32 BIT_EXPR: BIT_EXPR TOK_BIT_AND . EQ_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    EQ_EXPR     go to state 82
    REL_EXPR    go to state 25
    SHIFT_EXPR  go to state 26
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 47

   33 BIT_EXPR: BIT_EXPR TOK_BIT_OR . EQ_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    EQ_EXPR     go to state 83
    REL_EXPR    go to state 25
    SHIFT_EXPR  go to state 26
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 48

   34 BIT_EXPR: BIT_EXPR TOK_BIT_XOR . EQ_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    EQ_EXPR     go to state 84
    REL_EXPR    go to state 25
    SHIFT_EXPR  go to state 26
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 49

   36 EQ_EXPR: EQ_EXPR TOK_EQ . REL_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    REL_EXPR    go to state 85
    SHIFT_EXPR  go to state 26
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 50

   37 EQ_EXPR: EQ_EXPR TOK_NEQ . REL_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    REL_EXPR    go to state 86
    SHIFT_EXPR  go to state 26
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 51

   40 REL_EXPR: REL_EXPR TOK_GE . SHIFT_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    SHIFT_EXPR  go to state 87
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 52

   39 REL_EXPR: REL_EXPR TOK_LE . SHIFT_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    SHIFT_EXPR  go to state 88
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 53

   41 REL_EXPR: REL_EXPR TOK_G . SHIFT_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    SHIFT_EXPR  go to state 89
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 54

   42 REL_EXPR: REL_EXPR TOK_L . SHIFT_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    SHIFT_EXPR  go to state 90
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 55

   44 SHIFT_EXPR: SHIFT_EXPR TOK_LSHIFT . ADD_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    ADD_EXPR   go to state 91
    MULT_EXPR  go to state 28
    UNARY      go to state 29
    FACTOR     go to state 30


State 56

   45 SHIFT_EXPR: SHIFT_EXPR TOK_RSHIFT . ADD_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    ADD_EXPR   go to state 92
    MULT_EXPR  go to state 28
    UNARY      go to state 29
    FACTOR     go to state 30


State 57

   47 ADD_EXPR: ADD_EXPR TOK_PLUS . MULT_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    MULT_EXPR  go to state 93
    UNARY      go to state 29
    FACTOR     go to state 30


State 58

   48 ADD_EXPR: ADD_EXPR TOK_MINUS . MULT_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    MULT_EXPR  go to state 94
    UNARY      go to state 29
    FACTOR     go to state 30


State 59

   50 MULT_EXPR: MULT_EXPR TOK_MUL . UNARY

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    UNARY   go to state 95
    FACTOR  go to state 30


State 60

   51 MULT_EXPR: MULT_EXPR TOK_DIVIDE . UNARY

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    UNARY   go to state 96
    FACTOR  go to state 30


State 61

   52 MULT_EXPR: MULT_EXPR TOK_MOD . UNARY

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    UNARY   go to state 97
    FACTOR  go to state 30


State 62

   70 FUNC_STATEMENT: TOK_LCBRACKET . REC_STATEMENT TOK_RCBRACKET
   71               | TOK_LCBRACKET . REC_DECLARATION TOK_RCBRACKET
   72               | TOK_LCBRACKET . REC_DECLARATION REC_STATEMENT TOK_RCBRACKET

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_IF         shift, and go to state 98
    TOK_WHILE      shift, and go to state 99
    TOK_RETURN     shift, and go to state 100
    TOK_BREAK      shift, and go to state 101
    TOK_CONT       shift, and go to state 102
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_LCBRACKET  shift, and go to state 62
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35
    VARTYPE_INT    shift, and go to state 103

    REC_DECLARATION   go to state 104
    DECLARATION       go to state 105
    ASSIGN_EXPR       go to state 106
    LOGIC_EXPR        go to state 37
    BIT_EXPR          go to state 23
    EQ_EXPR           go to state 24
    REL_EXPR          go to state 25
    SHIFT_EXPR        go to state 26
    ADD_EXPR          go to state 27
    MULT_EXPR         go to state 28
    UNARY             go to state 29
    FACTOR            go to state 30
    REC_STATEMENT     go to state 107
    STATEMENT         go to state 108
    EXPR_STATEMENT    go to state 109
    FUNC_STATEMENT    go to state 110
    SELECT_STATEMENT  go to state 111
    ITER_STATEMENT    go to state 112
    JUMP_STATEMENT    go to state 113


State 63

    7 FUNCTION: VARTYPE_INT DECLARATOR TOK_LBRACKET TOK_RBRACKET FUNC_STATEMENT .

    $default  reduce using rule 7 (FUNCTION)


State 64

   14 FUNC_ARGS: VARTYPE_INT DECLARATOR .

    $default  reduce using rule 14 (FUNC_ARGS)


State 65

    6 FUNCTION: VARTYPE_INT DECLARATOR TOK_LBRACKET FUNC_ARGS TOK_RBRACKET . FUNC_STATEMENT

    TOK_LCBRACKET  shift, and go to state 62

    FUNC_STATEMENT  go to state 114


State 66

   15 FUNC_ARGS: FUNC_ARGS TOK_COMMA . FUNC_ARGS

    VARTYPE_INT  shift, and go to state 32

    FUNC_ARGS  go to state 115


State 67

   12 DECLARATION: VARTYPE_INT DECLARATOR TOK_EQASSIGN TOK_LCBRACKET TOK_RCBRACKET . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 116


State 68

   13 DECLARATION: VARTYPE_INT DECLARATOR TOK_EQASSIGN TOK_LCBRACKET FUNC_CALL_ARGS . TOK_RCBRACKET TOK_SEMICOLON
   17 FUNC_CALL_ARGS: FUNC_CALL_ARGS . TOK_COMMA ASSIGN_EXPR

    TOK_RCBRACKET  shift, and go to state 117
    TOK_COMMA      shift, and go to state 118


State 69

   16 FUNC_CALL_ARGS: ASSIGN_EXPR .

    $default  reduce using rule 16 (FUNC_CALL_ARGS)


State 70

   24 ASSIGN_EXPR: TOK_VAR TOK_SUBASSIGN . ASSIGN_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR  go to state 119
    LOGIC_EXPR   go to state 37
    BIT_EXPR     go to state 23
    EQ_EXPR      go to state 24
    REL_EXPR     go to state 25
    SHIFT_EXPR   go to state 26
    ADD_EXPR     go to state 27
    MULT_EXPR    go to state 28
    UNARY        go to state 29
    FACTOR       go to state 30


State 71

   25 ASSIGN_EXPR: TOK_VAR TOK_MULASSIGN . ASSIGN_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR  go to state 120
    LOGIC_EXPR   go to state 37
    BIT_EXPR     go to state 23
    EQ_EXPR      go to state 24
    REL_EXPR     go to state 25
    SHIFT_EXPR   go to state 26
    ADD_EXPR     go to state 27
    MULT_EXPR    go to state 28
    UNARY        go to state 29
    FACTOR       go to state 30


State 72

   26 ASSIGN_EXPR: TOK_VAR TOK_DIVASSIGN . ASSIGN_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR  go to state 121
    LOGIC_EXPR   go to state 37
    BIT_EXPR     go to state 23
    EQ_EXPR      go to state 24
    REL_EXPR     go to state 25
    SHIFT_EXPR   go to state 26
    ADD_EXPR     go to state 27
    MULT_EXPR    go to state 28
    UNARY        go to state 29
    FACTOR       go to state 30


State 73

   23 ASSIGN_EXPR: TOK_VAR TOK_ADDASSIGN . ASSIGN_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR  go to state 122
    LOGIC_EXPR   go to state 37
    BIT_EXPR     go to state 23
    EQ_EXPR      go to state 24
    REL_EXPR     go to state 25
    SHIFT_EXPR   go to state 26
    ADD_EXPR     go to state 27
    MULT_EXPR    go to state 28
    UNARY        go to state 29
    FACTOR       go to state 30


State 74

   22 ASSIGN_EXPR: TOK_VAR TOK_EQASSIGN . ASSIGN_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR  go to state 123
    LOGIC_EXPR   go to state 37
    BIT_EXPR     go to state 23
    EQ_EXPR      go to state 24
    REL_EXPR     go to state 25
    SHIFT_EXPR   go to state 26
    ADD_EXPR     go to state 27
    MULT_EXPR    go to state 28
    UNARY        go to state 29
    FACTOR       go to state 30


State 75

   27 ASSIGN_EXPR: TOK_VAR TOK_MODASSIGN . ASSIGN_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR  go to state 124
    LOGIC_EXPR   go to state 37
    BIT_EXPR     go to state 23
    EQ_EXPR      go to state 24
    REL_EXPR     go to state 25
    SHIFT_EXPR   go to state 26
    ADD_EXPR     go to state 27
    MULT_EXPR    go to state 28
    UNARY        go to state 29
    FACTOR       go to state 30


State 76

   11 DECLARATION: VARTYPE_INT DECLARATOR TOK_EQASSIGN ASSIGN_EXPR TOK_SEMICOLON .

    $default  reduce using rule 11 (DECLARATION)


State 77

   59 FACTOR: TOK_LBRACKET ASSIGN_EXPR TOK_RBRACKET .

    $default  reduce using rule 59 (FACTOR)


State 78

   60 FACTOR: TOK_VAR TOK_LBRACKET TOK_RBRACKET .

    $default  reduce using rule 60 (FACTOR)


State 79

   17 FUNC_CALL_ARGS: FUNC_CALL_ARGS . TOK_COMMA ASSIGN_EXPR
   61 FACTOR: TOK_VAR TOK_LBRACKET FUNC_CALL_ARGS . TOK_RBRACKET

    TOK_RBRACKET  shift, and go to state 125
    TOK_COMMA     shift, and go to state 118


State 80

   29 LOGIC_EXPR: LOGIC_EXPR TOK_LOGIC_AND BIT_EXPR .
   32 BIT_EXPR: BIT_EXPR . TOK_BIT_AND EQ_EXPR
   33         | BIT_EXPR . TOK_BIT_OR EQ_EXPR
   34         | BIT_EXPR . TOK_BIT_XOR EQ_EXPR

    TOK_BIT_AND  shift, and go to state 46
    TOK_BIT_OR   shift, and go to state 47
    TOK_BIT_XOR  shift, and go to state 48

    $default  reduce using rule 29 (LOGIC_EXPR)


State 81

   30 LOGIC_EXPR: LOGIC_EXPR TOK_LOGIC_OR BIT_EXPR .
   32 BIT_EXPR: BIT_EXPR . TOK_BIT_AND EQ_EXPR
   33         | BIT_EXPR . TOK_BIT_OR EQ_EXPR
   34         | BIT_EXPR . TOK_BIT_XOR EQ_EXPR

    TOK_BIT_AND  shift, and go to state 46
    TOK_BIT_OR   shift, and go to state 47
    TOK_BIT_XOR  shift, and go to state 48

    $default  reduce using rule 30 (LOGIC_EXPR)


State 82

   32 BIT_EXPR: BIT_EXPR TOK_BIT_AND EQ_EXPR .
   36 EQ_EXPR: EQ_EXPR . TOK_EQ REL_EXPR
   37        | EQ_EXPR . TOK_NEQ REL_EXPR

    TOK_EQ   shift, and go to state 49
    TOK_NEQ  shift, and go to state 50

    $default  reduce using rule 32 (BIT_EXPR)


State 83

   33 BIT_EXPR: BIT_EXPR TOK_BIT_OR EQ_EXPR .
   36 EQ_EXPR: EQ_EXPR . TOK_EQ REL_EXPR
   37        | EQ_EXPR . TOK_NEQ REL_EXPR

    TOK_EQ   shift, and go to state 49
    TOK_NEQ  shift, and go to state 50

    $default  reduce using rule 33 (BIT_EXPR)


State 84

   34 BIT_EXPR: BIT_EXPR TOK_BIT_XOR EQ_EXPR .
   36 EQ_EXPR: EQ_EXPR . TOK_EQ REL_EXPR
   37        | EQ_EXPR . TOK_NEQ REL_EXPR

    TOK_EQ   shift, and go to state 49
    TOK_NEQ  shift, and go to state 50

    $default  reduce using rule 34 (BIT_EXPR)


State 85

   36 EQ_EXPR: EQ_EXPR TOK_EQ REL_EXPR .
   39 REL_EXPR: REL_EXPR . TOK_LE SHIFT_EXPR
   40         | REL_EXPR . TOK_GE SHIFT_EXPR
   41         | REL_EXPR . TOK_G SHIFT_EXPR
   42         | REL_EXPR . TOK_L SHIFT_EXPR

    TOK_GE  shift, and go to state 51
    TOK_LE  shift, and go to state 52
    TOK_G   shift, and go to state 53
    TOK_L   shift, and go to state 54

    $default  reduce using rule 36 (EQ_EXPR)


State 86

   37 EQ_EXPR: EQ_EXPR TOK_NEQ REL_EXPR .
   39 REL_EXPR: REL_EXPR . TOK_LE SHIFT_EXPR
   40         | REL_EXPR . TOK_GE SHIFT_EXPR
   41         | REL_EXPR . TOK_G SHIFT_EXPR
   42         | REL_EXPR . TOK_L SHIFT_EXPR

    TOK_GE  shift, and go to state 51
    TOK_LE  shift, and go to state 52
    TOK_G   shift, and go to state 53
    TOK_L   shift, and go to state 54

    $default  reduce using rule 37 (EQ_EXPR)


State 87

   40 REL_EXPR: REL_EXPR TOK_GE SHIFT_EXPR .
   44 SHIFT_EXPR: SHIFT_EXPR . TOK_LSHIFT ADD_EXPR
   45           | SHIFT_EXPR . TOK_RSHIFT ADD_EXPR

    TOK_LSHIFT  shift, and go to state 55
    TOK_RSHIFT  shift, and go to state 56

    $default  reduce using rule 40 (REL_EXPR)


State 88

   39 REL_EXPR: REL_EXPR TOK_LE SHIFT_EXPR .
   44 SHIFT_EXPR: SHIFT_EXPR . TOK_LSHIFT ADD_EXPR
   45           | SHIFT_EXPR . TOK_RSHIFT ADD_EXPR

    TOK_LSHIFT  shift, and go to state 55
    TOK_RSHIFT  shift, and go to state 56

    $default  reduce using rule 39 (REL_EXPR)


State 89

   41 REL_EXPR: REL_EXPR TOK_G SHIFT_EXPR .
   44 SHIFT_EXPR: SHIFT_EXPR . TOK_LSHIFT ADD_EXPR
   45           | SHIFT_EXPR . TOK_RSHIFT ADD_EXPR

    TOK_LSHIFT  shift, and go to state 55
    TOK_RSHIFT  shift, and go to state 56

    $default  reduce using rule 41 (REL_EXPR)


State 90

   42 REL_EXPR: REL_EXPR TOK_L SHIFT_EXPR .
   44 SHIFT_EXPR: SHIFT_EXPR . TOK_LSHIFT ADD_EXPR
   45           | SHIFT_EXPR . TOK_RSHIFT ADD_EXPR

    TOK_LSHIFT  shift, and go to state 55
    TOK_RSHIFT  shift, and go to state 56

    $default  reduce using rule 42 (REL_EXPR)


State 91

   44 SHIFT_EXPR: SHIFT_EXPR TOK_LSHIFT ADD_EXPR .
   47 ADD_EXPR: ADD_EXPR . TOK_PLUS MULT_EXPR
   48         | ADD_EXPR . TOK_MINUS MULT_EXPR

    TOK_PLUS   shift, and go to state 57
    TOK_MINUS  shift, and go to state 58

    $default  reduce using rule 44 (SHIFT_EXPR)


State 92

   45 SHIFT_EXPR: SHIFT_EXPR TOK_RSHIFT ADD_EXPR .
   47 ADD_EXPR: ADD_EXPR . TOK_PLUS MULT_EXPR
   48         | ADD_EXPR . TOK_MINUS MULT_EXPR

    TOK_PLUS   shift, and go to state 57
    TOK_MINUS  shift, and go to state 58

    $default  reduce using rule 45 (SHIFT_EXPR)


State 93

   47 ADD_EXPR: ADD_EXPR TOK_PLUS MULT_EXPR .
   50 MULT_EXPR: MULT_EXPR . TOK_MUL UNARY
   51          | MULT_EXPR . TOK_DIVIDE UNARY
   52          | MULT_EXPR . TOK_MOD UNARY

    TOK_MUL     shift, and go to state 59
    TOK_DIVIDE  shift, and go to state 60
    TOK_MOD     shift, and go to state 61

    $default  reduce using rule 47 (ADD_EXPR)


State 94

   48 ADD_EXPR: ADD_EXPR TOK_MINUS MULT_EXPR .
   50 MULT_EXPR: MULT_EXPR . TOK_MUL UNARY
   51          | MULT_EXPR . TOK_DIVIDE UNARY
   52          | MULT_EXPR . TOK_MOD UNARY

    TOK_MUL     shift, and go to state 59
    TOK_DIVIDE  shift, and go to state 60
    TOK_MOD     shift, and go to state 61

    $default  reduce using rule 48 (ADD_EXPR)


State 95

   50 MULT_EXPR: MULT_EXPR TOK_MUL UNARY .

    $default  reduce using rule 50 (MULT_EXPR)


State 96

   51 MULT_EXPR: MULT_EXPR TOK_DIVIDE UNARY .

    $default  reduce using rule 51 (MULT_EXPR)


State 97

   52 MULT_EXPR: MULT_EXPR TOK_MOD UNARY .

    $default  reduce using rule 52 (MULT_EXPR)


State 98

   73 SELECT_STATEMENT: TOK_IF . TOK_LBRACKET LOGIC_EXPR TOK_RBRACKET STATEMENT
   74                 | TOK_IF . TOK_LBRACKET LOGIC_EXPR TOK_RBRACKET STATEMENT TOK_ELSE STATEMENT

    TOK_LBRACKET  shift, and go to state 126


State 99

   75 ITER_STATEMENT: TOK_WHILE . TOK_LBRACKET EXPR TOK_RBRACKET STATEMENT

    TOK_LBRACKET  shift, and go to state 127


State 100

   78 JUMP_STATEMENT: TOK_RETURN . TOK_SEMICOLON
   79               | TOK_RETURN . FUNCTION TOK_SEMICOLON
   80               | TOK_RETURN . LOGIC_EXPR TOK_SEMICOLON

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_SEMICOLON  shift, and go to state 128
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21
    VARTYPE_INT    shift, and go to state 129

    FUNCTION    go to state 130
    LOGIC_EXPR  go to state 131
    BIT_EXPR    go to state 23
    EQ_EXPR     go to state 24
    REL_EXPR    go to state 25
    SHIFT_EXPR  go to state 26
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 101

   76 JUMP_STATEMENT: TOK_BREAK . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 132


State 102

   77 JUMP_STATEMENT: TOK_CONT . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 133


State 103

   10 DECLARATION: VARTYPE_INT . DECLARATOR TOK_SEMICOLON
   11            | VARTYPE_INT . DECLARATOR TOK_EQASSIGN ASSIGN_EXPR TOK_SEMICOLON
   12            | VARTYPE_INT . DECLARATOR TOK_EQASSIGN TOK_LCBRACKET TOK_RCBRACKET TOK_SEMICOLON
   13            | VARTYPE_INT . DECLARATOR TOK_EQASSIGN TOK_LCBRACKET FUNC_CALL_ARGS TOK_RCBRACKET TOK_SEMICOLON

    TOK_VAR  shift, and go to state 7

    DECLARATOR  go to state 134


State 104

    9 REC_DECLARATION: REC_DECLARATION . DECLARATION
   71 FUNC_STATEMENT: TOK_LCBRACKET REC_DECLARATION . TOK_RCBRACKET
   72               | TOK_LCBRACKET REC_DECLARATION . REC_STATEMENT TOK_RCBRACKET

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_IF         shift, and go to state 98
    TOK_WHILE      shift, and go to state 99
    TOK_RETURN     shift, and go to state 100
    TOK_BREAK      shift, and go to state 101
    TOK_CONT       shift, and go to state 102
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_LCBRACKET  shift, and go to state 62
    TOK_RCBRACKET  shift, and go to state 135
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35
    VARTYPE_INT    shift, and go to state 103

    DECLARATION       go to state 136
    ASSIGN_EXPR       go to state 106
    LOGIC_EXPR        go to state 37
    BIT_EXPR          go to state 23
    EQ_EXPR           go to state 24
    REL_EXPR          go to state 25
    SHIFT_EXPR        go to state 26
    ADD_EXPR          go to state 27
    MULT_EXPR         go to state 28
    UNARY             go to state 29
    FACTOR            go to state 30
    REC_STATEMENT     go to state 137
    STATEMENT         go to state 108
    EXPR_STATEMENT    go to state 109
    FUNC_STATEMENT    go to state 110
    SELECT_STATEMENT  go to state 111
    ITER_STATEMENT    go to state 112
    JUMP_STATEMENT    go to state 113


State 105

    8 REC_DECLARATION: DECLARATION .

    $default  reduce using rule 8 (REC_DECLARATION)


State 106

   69 EXPR_STATEMENT: ASSIGN_EXPR . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 138


State 107

   63 REC_STATEMENT: REC_STATEMENT . STATEMENT
   70 FUNC_STATEMENT: TOK_LCBRACKET REC_STATEMENT . TOK_RCBRACKET

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_IF         shift, and go to state 98
    TOK_WHILE      shift, and go to state 99
    TOK_RETURN     shift, and go to state 100
    TOK_BREAK      shift, and go to state 101
    TOK_CONT       shift, and go to state 102
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_LCBRACKET  shift, and go to state 62
    TOK_RCBRACKET  shift, and go to state 139
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR       go to state 106
    LOGIC_EXPR        go to state 37
    BIT_EXPR          go to state 23
    EQ_EXPR           go to state 24
    REL_EXPR          go to state 25
    SHIFT_EXPR        go to state 26
    ADD_EXPR          go to state 27
    MULT_EXPR         go to state 28
    UNARY             go to state 29
    FACTOR            go to state 30
    STATEMENT         go to state 140
    EXPR_STATEMENT    go to state 109
    FUNC_STATEMENT    go to state 110
    SELECT_STATEMENT  go to state 111
    ITER_STATEMENT    go to state 112
    JUMP_STATEMENT    go to state 113


State 108

   62 REC_STATEMENT: STATEMENT .

    $default  reduce using rule 62 (REC_STATEMENT)


State 109

   64 STATEMENT: EXPR_STATEMENT .

    $default  reduce using rule 64 (STATEMENT)


State 110

   68 STATEMENT: FUNC_STATEMENT .

    $default  reduce using rule 68 (STATEMENT)


State 111

   67 STATEMENT: SELECT_STATEMENT .

    $default  reduce using rule 67 (STATEMENT)


State 112

   65 STATEMENT: ITER_STATEMENT .

    $default  reduce using rule 65 (STATEMENT)


State 113

   66 STATEMENT: JUMP_STATEMENT .

    $default  reduce using rule 66 (STATEMENT)


State 114

    6 FUNCTION: VARTYPE_INT DECLARATOR TOK_LBRACKET FUNC_ARGS TOK_RBRACKET FUNC_STATEMENT .

    $default  reduce using rule 6 (FUNCTION)


State 115

   15 FUNC_ARGS: FUNC_ARGS . TOK_COMMA FUNC_ARGS
   15          | FUNC_ARGS TOK_COMMA FUNC_ARGS .

    TOK_COMMA  shift, and go to state 66

    TOK_COMMA  [reduce using rule 15 (FUNC_ARGS)]
    $default   reduce using rule 15 (FUNC_ARGS)


State 116

   12 DECLARATION: VARTYPE_INT DECLARATOR TOK_EQASSIGN TOK_LCBRACKET TOK_RCBRACKET TOK_SEMICOLON .

    $default  reduce using rule 12 (DECLARATION)


State 117

   13 DECLARATION: VARTYPE_INT DECLARATOR TOK_EQASSIGN TOK_LCBRACKET FUNC_CALL_ARGS TOK_RCBRACKET . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 141


State 118

   17 FUNC_CALL_ARGS: FUNC_CALL_ARGS TOK_COMMA . ASSIGN_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR  go to state 142
    LOGIC_EXPR   go to state 37
    BIT_EXPR     go to state 23
    EQ_EXPR      go to state 24
    REL_EXPR     go to state 25
    SHIFT_EXPR   go to state 26
    ADD_EXPR     go to state 27
    MULT_EXPR    go to state 28
    UNARY        go to state 29
    FACTOR       go to state 30


State 119

   24 ASSIGN_EXPR: TOK_VAR TOK_SUBASSIGN ASSIGN_EXPR .

    $default  reduce using rule 24 (ASSIGN_EXPR)


State 120

   25 ASSIGN_EXPR: TOK_VAR TOK_MULASSIGN ASSIGN_EXPR .

    $default  reduce using rule 25 (ASSIGN_EXPR)


State 121

   26 ASSIGN_EXPR: TOK_VAR TOK_DIVASSIGN ASSIGN_EXPR .

    $default  reduce using rule 26 (ASSIGN_EXPR)


State 122

   23 ASSIGN_EXPR: TOK_VAR TOK_ADDASSIGN ASSIGN_EXPR .

    $default  reduce using rule 23 (ASSIGN_EXPR)


State 123

   22 ASSIGN_EXPR: TOK_VAR TOK_EQASSIGN ASSIGN_EXPR .

    $default  reduce using rule 22 (ASSIGN_EXPR)


State 124

   27 ASSIGN_EXPR: TOK_VAR TOK_MODASSIGN ASSIGN_EXPR .

    $default  reduce using rule 27 (ASSIGN_EXPR)


State 125

   61 FACTOR: TOK_VAR TOK_LBRACKET FUNC_CALL_ARGS TOK_RBRACKET .

    $default  reduce using rule 61 (FACTOR)


State 126

   73 SELECT_STATEMENT: TOK_IF TOK_LBRACKET . LOGIC_EXPR TOK_RBRACKET STATEMENT
   74                 | TOK_IF TOK_LBRACKET . LOGIC_EXPR TOK_RBRACKET STATEMENT TOK_ELSE STATEMENT

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    LOGIC_EXPR  go to state 143
    BIT_EXPR    go to state 23
    EQ_EXPR     go to state 24
    REL_EXPR    go to state 25
    SHIFT_EXPR  go to state 26
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 127

   75 ITER_STATEMENT: TOK_WHILE TOK_LBRACKET . EXPR TOK_RBRACKET STATEMENT

    VARTYPE_INT  shift, and go to state 1

    EXPR         go to state 144
    FUNCTION     go to state 5
    DECLARATION  go to state 6


State 128

   78 JUMP_STATEMENT: TOK_RETURN TOK_SEMICOLON .

    $default  reduce using rule 78 (JUMP_STATEMENT)


State 129

    6 FUNCTION: VARTYPE_INT . DECLARATOR TOK_LBRACKET FUNC_ARGS TOK_RBRACKET FUNC_STATEMENT
    7         | VARTYPE_INT . DECLARATOR TOK_LBRACKET TOK_RBRACKET FUNC_STATEMENT

    TOK_VAR  shift, and go to state 7

    DECLARATOR  go to state 145


State 130

   79 JUMP_STATEMENT: TOK_RETURN FUNCTION . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 146


State 131

   29 LOGIC_EXPR: LOGIC_EXPR . TOK_LOGIC_AND BIT_EXPR
   30           | LOGIC_EXPR . TOK_LOGIC_OR BIT_EXPR
   80 JUMP_STATEMENT: TOK_RETURN LOGIC_EXPR . TOK_SEMICOLON

    TOK_LOGIC_AND  shift, and go to state 43
    TOK_LOGIC_OR   shift, and go to state 44
    TOK_SEMICOLON  shift, and go to state 147


State 132

   76 JUMP_STATEMENT: TOK_BREAK TOK_SEMICOLON .

    $default  reduce using rule 76 (JUMP_STATEMENT)


State 133

   77 JUMP_STATEMENT: TOK_CONT TOK_SEMICOLON .

    $default  reduce using rule 77 (JUMP_STATEMENT)


State 134

   10 DECLARATION: VARTYPE_INT DECLARATOR . TOK_SEMICOLON
   11            | VARTYPE_INT DECLARATOR . TOK_EQASSIGN ASSIGN_EXPR TOK_SEMICOLON
   12            | VARTYPE_INT DECLARATOR . TOK_EQASSIGN TOK_LCBRACKET TOK_RCBRACKET TOK_SEMICOLON
   13            | VARTYPE_INT DECLARATOR . TOK_EQASSIGN TOK_LCBRACKET FUNC_CALL_ARGS TOK_RCBRACKET TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 13
    TOK_EQASSIGN   shift, and go to state 14


State 135

   71 FUNC_STATEMENT: TOK_LCBRACKET REC_DECLARATION TOK_RCBRACKET .

    $default  reduce using rule 71 (FUNC_STATEMENT)


State 136

    9 REC_DECLARATION: REC_DECLARATION DECLARATION .

    $default  reduce using rule 9 (REC_DECLARATION)


State 137

   63 REC_STATEMENT: REC_STATEMENT . STATEMENT
   72 FUNC_STATEMENT: TOK_LCBRACKET REC_DECLARATION REC_STATEMENT . TOK_RCBRACKET

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_IF         shift, and go to state 98
    TOK_WHILE      shift, and go to state 99
    TOK_RETURN     shift, and go to state 100
    TOK_BREAK      shift, and go to state 101
    TOK_CONT       shift, and go to state 102
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_LCBRACKET  shift, and go to state 62
    TOK_RCBRACKET  shift, and go to state 148
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR       go to state 106
    LOGIC_EXPR        go to state 37
    BIT_EXPR          go to state 23
    EQ_EXPR           go to state 24
    REL_EXPR          go to state 25
    SHIFT_EXPR        go to state 26
    ADD_EXPR          go to state 27
    MULT_EXPR         go to state 28
    UNARY             go to state 29
    FACTOR            go to state 30
    STATEMENT         go to state 140
    EXPR_STATEMENT    go to state 109
    FUNC_STATEMENT    go to state 110
    SELECT_STATEMENT  go to state 111
    ITER_STATEMENT    go to state 112
    JUMP_STATEMENT    go to state 113


State 138

   69 EXPR_STATEMENT: ASSIGN_EXPR TOK_SEMICOLON .

    $default  reduce using rule 69 (EXPR_STATEMENT)


State 139

   70 FUNC_STATEMENT: TOK_LCBRACKET REC_STATEMENT TOK_RCBRACKET .

    $default  reduce using rule 70 (FUNC_STATEMENT)


State 140

   63 REC_STATEMENT: REC_STATEMENT STATEMENT .

    $default  reduce using rule 63 (REC_STATEMENT)


State 141

   13 DECLARATION: VARTYPE_INT DECLARATOR TOK_EQASSIGN TOK_LCBRACKET FUNC_CALL_ARGS TOK_RCBRACKET TOK_SEMICOLON .

    $default  reduce using rule 13 (DECLARATION)


State 142

   17 FUNC_CALL_ARGS: FUNC_CALL_ARGS TOK_COMMA ASSIGN_EXPR .

    $default  reduce using rule 17 (FUNC_CALL_ARGS)


State 143

   29 LOGIC_EXPR: LOGIC_EXPR . TOK_LOGIC_AND BIT_EXPR
   30           | LOGIC_EXPR . TOK_LOGIC_OR BIT_EXPR
   73 SELECT_STATEMENT: TOK_IF TOK_LBRACKET LOGIC_EXPR . TOK_RBRACKET STATEMENT
   74                 | TOK_IF TOK_LBRACKET LOGIC_EXPR . TOK_RBRACKET STATEMENT TOK_ELSE STATEMENT

    TOK_LOGIC_AND  shift, and go to state 43
    TOK_LOGIC_OR   shift, and go to state 44
    TOK_RBRACKET   shift, and go to state 149


State 144

   75 ITER_STATEMENT: TOK_WHILE TOK_LBRACKET EXPR . TOK_RBRACKET STATEMENT

    TOK_RBRACKET  shift, and go to state 150


State 145

    6 FUNCTION: VARTYPE_INT DECLARATOR . TOK_LBRACKET FUNC_ARGS TOK_RBRACKET FUNC_STATEMENT
    7         | VARTYPE_INT DECLARATOR . TOK_LBRACKET TOK_RBRACKET FUNC_STATEMENT

    TOK_LBRACKET  shift, and go to state 12


State 146

   79 JUMP_STATEMENT: TOK_RETURN FUNCTION TOK_SEMICOLON .

    $default  reduce using rule 79 (JUMP_STATEMENT)


State 147

   80 JUMP_STATEMENT: TOK_RETURN LOGIC_EXPR TOK_SEMICOLON .

    $default  reduce using rule 80 (JUMP_STATEMENT)


State 148

   72 FUNC_STATEMENT: TOK_LCBRACKET REC_DECLARATION REC_STATEMENT TOK_RCBRACKET .

    $default  reduce using rule 72 (FUNC_STATEMENT)


State 149

   73 SELECT_STATEMENT: TOK_IF TOK_LBRACKET LOGIC_EXPR TOK_RBRACKET . STATEMENT
   74                 | TOK_IF TOK_LBRACKET LOGIC_EXPR TOK_RBRACKET . STATEMENT TOK_ELSE STATEMENT

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_IF         shift, and go to state 98
    TOK_WHILE      shift, and go to state 99
    TOK_RETURN     shift, and go to state 100
    TOK_BREAK      shift, and go to state 101
    TOK_CONT       shift, and go to state 102
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_LCBRACKET  shift, and go to state 62
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR       go to state 106
    LOGIC_EXPR        go to state 37
    BIT_EXPR          go to state 23
    EQ_EXPR           go to state 24
    REL_EXPR          go to state 25
    SHIFT_EXPR        go to state 26
    ADD_EXPR          go to state 27
    MULT_EXPR         go to state 28
    UNARY             go to state 29
    FACTOR            go to state 30
    STATEMENT         go to state 151
    EXPR_STATEMENT    go to state 109
    FUNC_STATEMENT    go to state 110
    SELECT_STATEMENT  go to state 111
    ITER_STATEMENT    go to state 112
    JUMP_STATEMENT    go to state 113


State 150

   75 ITER_STATEMENT: TOK_WHILE TOK_LBRACKET EXPR TOK_RBRACKET . STATEMENT

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_IF         shift, and go to state 98
    TOK_WHILE      shift, and go to state 99
    TOK_RETURN     shift, and go to state 100
    TOK_BREAK      shift, and go to state 101
    TOK_CONT       shift, and go to state 102
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_LCBRACKET  shift, and go to state 62
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR       go to state 106
    LOGIC_EXPR        go to state 37
    BIT_EXPR          go to state 23
    EQ_EXPR           go to state 24
    REL_EXPR          go to state 25
    SHIFT_EXPR        go to state 26
    ADD_EXPR          go to state 27
    MULT_EXPR         go to state 28
    UNARY             go to state 29
    FACTOR            go to state 30
    STATEMENT         go to state 152
    EXPR_STATEMENT    go to state 109
    FUNC_STATEMENT    go to state 110
    SELECT_STATEMENT  go to state 111
    ITER_STATEMENT    go to state 112
    JUMP_STATEMENT    go to state 113


State 151

   73 SELECT_STATEMENT: TOK_IF TOK_LBRACKET LOGIC_EXPR TOK_RBRACKET STATEMENT .
   74                 | TOK_IF TOK_LBRACKET LOGIC_EXPR TOK_RBRACKET STATEMENT . TOK_ELSE STATEMENT

    TOK_ELSE  shift, and go to state 153

    TOK_ELSE  [reduce using rule 73 (SELECT_STATEMENT)]
    $default  reduce using rule 73 (SELECT_STATEMENT)


State 152

   75 ITER_STATEMENT: TOK_WHILE TOK_LBRACKET EXPR TOK_RBRACKET STATEMENT .

    $default  reduce using rule 75 (ITER_STATEMENT)


State 153

   74 SELECT_STATEMENT: TOK_IF TOK_LBRACKET LOGIC_EXPR TOK_RBRACKET STATEMENT TOK_ELSE . STATEMENT

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_IF         shift, and go to state 98
    TOK_WHILE      shift, and go to state 99
    TOK_RETURN     shift, and go to state 100
    TOK_BREAK      shift, and go to state 101
    TOK_CONT       shift, and go to state 102
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_LCBRACKET  shift, and go to state 62
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR       go to state 106
    LOGIC_EXPR        go to state 37
    BIT_EXPR          go to state 23
    EQ_EXPR           go to state 24
    REL_EXPR          go to state 25
    SHIFT_EXPR        go to state 26
    ADD_EXPR          go to state 27
    MULT_EXPR         go to state 28
    UNARY             go to state 29
    FACTOR            go to state 30
    STATEMENT         go to state 154
    EXPR_STATEMENT    go to state 109
    FUNC_STATEMENT    go to state 110
    SELECT_STATEMENT  go to state 111
    ITER_STATEMENT    go to state 112
    JUMP_STATEMENT    go to state 113


State 154

   74 SELECT_STATEMENT: TOK_IF TOK_LBRACKET LOGIC_EXPR TOK_RBRACKET STATEMENT TOK_ELSE STATEMENT .

    $default  reduce using rule 74 (SELECT_STATEMENT)
