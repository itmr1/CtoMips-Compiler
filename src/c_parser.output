State 118 conflicts: 1 shift/reduce
State 154 conflicts: 1 shift/reduce


Grammar

    0 $accept: ROOT $end

    1 ROOT: EXPR_TREE

    2 EXPR_TREE: EXPR
    3          | EXPR_TREE EXPR

    4 EXPR: FUNCTION
    5     | DECLARATION

    6 FUNCTION: VARTYPE_INT DECLARATOR TOK_LBRACKET FUNC_ARGS TOK_RBRACKET FUNC_STATEMENT
    7         | VARTYPE_INT DECLARATOR TOK_LBRACKET TOK_RBRACKET FUNC_STATEMENT
    8         | VARTYPE_INT DECLARATOR TOK_LBRACKET FUNC_ARGS TOK_RBRACKET TOK_SEMICOLON
    9         | VARTYPE_INT DECLARATOR TOK_LBRACKET TOK_RBRACKET TOK_SEMICOLON

   10 REC_DECLARATION: DECLARATION
   11                | REC_DECLARATION DECLARATION

   12 DECLARATION: VARTYPE_INT DECLARATOR TOK_SEMICOLON
   13            | VARTYPE_INT DECLARATOR TOK_EQASSIGN ASSIGN_EXPR TOK_SEMICOLON
   14            | VARTYPE_INT DECLARATOR TOK_EQASSIGN TOK_LCBRACKET TOK_RCBRACKET TOK_SEMICOLON
   15            | VARTYPE_INT DECLARATOR TOK_EQASSIGN TOK_LCBRACKET FUNC_CALL_ARGS TOK_RCBRACKET TOK_SEMICOLON

   16 FUNC_ARGS: VARTYPE_INT DECLARATOR
   17          | FUNC_ARGS TOK_COMMA FUNC_ARGS

   18 FUNC_CALL_ARGS: ASSIGN_EXPR
   19               | FUNC_CALL_ARGS TOK_COMMA ASSIGN_EXPR

   20 DECLARATOR: TOK_VAR
   21           | TOK_VAR TOK_LSQBRACKET LOGIC_EXPR TOK_RSQBRACKET
   22           | TOK_VAR TOK_LSQBRACKET TOK_RSQBRACKET

   23 ASSIGN_EXPR: LOGIC_EXPR
   24            | TOK_VAR TOK_EQASSIGN ASSIGN_EXPR
   25            | TOK_VAR TOK_ADDASSIGN ASSIGN_EXPR
   26            | TOK_VAR TOK_SUBASSIGN ASSIGN_EXPR
   27            | TOK_VAR TOK_MULASSIGN ASSIGN_EXPR
   28            | TOK_VAR TOK_DIVASSIGN ASSIGN_EXPR
   29            | TOK_VAR TOK_MODASSIGN ASSIGN_EXPR

   30 LOGIC_EXPR: BIT_EXPR
   31           | LOGIC_EXPR TOK_LOGIC_AND BIT_EXPR
   32           | LOGIC_EXPR TOK_LOGIC_OR BIT_EXPR

   33 BIT_EXPR: EQ_EXPR
   34         | BIT_EXPR TOK_BIT_AND EQ_EXPR
   35         | BIT_EXPR TOK_BIT_OR EQ_EXPR
   36         | BIT_EXPR TOK_BIT_XOR EQ_EXPR

   37 EQ_EXPR: REL_EXPR
   38        | EQ_EXPR TOK_EQ REL_EXPR
   39        | EQ_EXPR TOK_NEQ REL_EXPR

   40 REL_EXPR: SHIFT_EXPR
   41         | REL_EXPR TOK_LE SHIFT_EXPR
   42         | REL_EXPR TOK_GE SHIFT_EXPR
   43         | REL_EXPR TOK_G SHIFT_EXPR
   44         | REL_EXPR TOK_L SHIFT_EXPR

   45 SHIFT_EXPR: ADD_EXPR
   46           | SHIFT_EXPR TOK_LSHIFT ADD_EXPR
   47           | SHIFT_EXPR TOK_RSHIFT ADD_EXPR

   48 ADD_EXPR: MULT_EXPR
   49         | ADD_EXPR TOK_PLUS MULT_EXPR
   50         | ADD_EXPR TOK_MINUS MULT_EXPR

   51 MULT_EXPR: UNARY
   52          | MULT_EXPR TOK_MUL UNARY
   53          | MULT_EXPR TOK_DIVIDE UNARY
   54          | MULT_EXPR TOK_MOD UNARY

   55 UNARY: FACTOR
   56      | TOK_MINUS UNARY
   57      | TOK_LOGIC_NOT UNARY
   58      | TOK_BIT_NOT UNARY

   59 FACTOR: TOK_N
   60       | TOK_VAR
   61       | TOK_LBRACKET ASSIGN_EXPR TOK_RBRACKET
   62       | TOK_VAR TOK_LBRACKET TOK_RBRACKET
   63       | TOK_VAR TOK_LBRACKET FUNC_CALL_ARGS TOK_RBRACKET

   64 REC_STATEMENT: STATEMENT
   65              | REC_STATEMENT STATEMENT

   66 STATEMENT: EXPR_STATEMENT
   67          | ITER_STATEMENT
   68          | JUMP_STATEMENT
   69          | SELECT_STATEMENT
   70          | FUNC_STATEMENT

   71 EXPR_STATEMENT: ASSIGN_EXPR TOK_SEMICOLON

   72 FUNC_STATEMENT: TOK_LCBRACKET TOK_RCBRACKET
   73               | TOK_LCBRACKET REC_STATEMENT TOK_RCBRACKET
   74               | TOK_LCBRACKET REC_DECLARATION TOK_RCBRACKET
   75               | TOK_LCBRACKET REC_DECLARATION REC_STATEMENT TOK_RCBRACKET

   76 SELECT_STATEMENT: TOK_IF TOK_LBRACKET LOGIC_EXPR TOK_RBRACKET STATEMENT
   77                 | TOK_IF TOK_LBRACKET LOGIC_EXPR TOK_RBRACKET STATEMENT TOK_ELSE STATEMENT

   78 ITER_STATEMENT: TOK_WHILE TOK_LBRACKET ASSIGN_EXPR TOK_RBRACKET STATEMENT

   79 JUMP_STATEMENT: TOK_BREAK TOK_SEMICOLON
   80               | TOK_CONT TOK_SEMICOLON
   81               | TOK_RETURN TOK_SEMICOLON
   82               | TOK_RETURN FUNCTION TOK_SEMICOLON
   83               | TOK_RETURN LOGIC_EXPR TOK_SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TOK_BIT_AND (258) 34
    TOK_BIT_OR (259) 35
    TOK_EQ (260) 38
    TOK_NEQ (261) 39
    TOK_BIT_XOR (262) 36
    TOK_LOGIC_AND (263) 31
    TOK_LOGIC_OR (264) 32
    TOK_LSHIFT (265) 46
    TOK_RSHIFT (266) 47
    TOK_LOGIC_NOT (267) 57
    TOK_BIT_NOT (268) 58
    TOK_GE (269) 42
    TOK_LE (270) 41
    TOK_G (271) 43
    TOK_L (272) 44
    TOK_IF (273) 76 77
    TOK_WHILE (274) 78
    TOK_ELSE (275) 77
    TOK_RETURN (276) 81 82 83
    TOK_BREAK (277) 79
    TOK_CONT (278) 80
    TOK_MUL (279) 52
    TOK_DIVIDE (280) 53
    TOK_PLUS (281) 49
    TOK_MINUS (282) 50 56
    TOK_MOD (283) 54
    TOK_LBRACKET (284) 6 7 8 9 61 62 63 76 77 78
    TOK_RBRACKET (285) 6 7 8 9 61 62 63 76 77 78
    TOK_SEMICOLON (286) 8 9 12 13 14 15 71 79 80 81 82 83
    TOK_LCBRACKET (287) 14 15 72 73 74 75
    TOK_RCBRACKET (288) 14 15 72 73 74 75
    TOK_LSQBRACKET (289) 21 22
    TOK_RSQBRACKET (290) 21 22
    TOK_COMMA (291) 17 19
    TOK_N <number> (292) 59
    TOK_VAR <string> (293) 20 21 22 24 25 26 27 28 29 60 62 63
    VARTYPE_INT <string> (294) 6 7 8 9 12 13 14 15 16
    TOK_SUBASSIGN (295) 26
    TOK_MULASSIGN (296) 27
    TOK_DIVASSIGN (297) 28
    TOK_ADDASSIGN (298) 25
    TOK_EQASSIGN (299) 13 14 15 24
    TOK_MODASSIGN (300) 29


Nonterminals, with rules where they appear

    $accept (46)
        on left: 0
    ROOT <expr> (47)
        on left: 1
        on right: 0
    EXPR_TREE <expr> (48)
        on left: 2 3
        on right: 1 3
    EXPR <expr> (49)
        on left: 4 5
        on right: 2 3
    FUNCTION <expr> (50)
        on left: 6 7 8 9
        on right: 4 82
    REC_DECLARATION <expr> (51)
        on left: 10 11
        on right: 11 74 75
    DECLARATION <expr> (52)
        on left: 12 13 14 15
        on right: 5 10 11
    FUNC_ARGS <expr> (53)
        on left: 16 17
        on right: 6 8 17
    FUNC_CALL_ARGS <expr> (54)
        on left: 18 19
        on right: 15 19 63
    DECLARATOR <expr> (55)
        on left: 20 21 22
        on right: 6 7 8 9 12 13 14 15 16
    ASSIGN_EXPR <expr> (56)
        on left: 23 24 25 26 27 28 29
        on right: 13 18 19 24 25 26 27 28 29 61 71 78
    LOGIC_EXPR <expr> (57)
        on left: 30 31 32
        on right: 21 23 31 32 76 77 83
    BIT_EXPR <expr> (58)
        on left: 33 34 35 36
        on right: 30 31 32 34 35 36
    EQ_EXPR <expr> (59)
        on left: 37 38 39
        on right: 33 34 35 36 38 39
    REL_EXPR <expr> (60)
        on left: 40 41 42 43 44
        on right: 37 38 39 41 42 43 44
    SHIFT_EXPR <expr> (61)
        on left: 45 46 47
        on right: 40 41 42 43 44 46 47
    ADD_EXPR <expr> (62)
        on left: 48 49 50
        on right: 45 46 47 49 50
    MULT_EXPR <expr> (63)
        on left: 51 52 53 54
        on right: 48 49 50 52 53 54
    UNARY <expr> (64)
        on left: 55 56 57 58
        on right: 51 52 53 54 56 57 58
    FACTOR <expr> (65)
        on left: 59 60 61 62 63
        on right: 55
    REC_STATEMENT <expr> (66)
        on left: 64 65
        on right: 65 73 75
    STATEMENT <expr> (67)
        on left: 66 67 68 69 70
        on right: 64 65 76 77 78
    EXPR_STATEMENT <expr> (68)
        on left: 71
        on right: 66
    FUNC_STATEMENT <expr> (69)
        on left: 72 73 74 75
        on right: 6 7 70
    SELECT_STATEMENT <expr> (70)
        on left: 76 77
        on right: 69
    ITER_STATEMENT <expr> (71)
        on left: 78
        on right: 67
    JUMP_STATEMENT <expr> (72)
        on left: 79 80 81 82 83
        on right: 68


State 0

    0 $accept: . ROOT $end

    VARTYPE_INT  shift, and go to state 1

    ROOT         go to state 2
    EXPR_TREE    go to state 3
    EXPR         go to state 4
    FUNCTION     go to state 5
    DECLARATION  go to state 6


State 1

    6 FUNCTION: VARTYPE_INT . DECLARATOR TOK_LBRACKET FUNC_ARGS TOK_RBRACKET FUNC_STATEMENT
    7         | VARTYPE_INT . DECLARATOR TOK_LBRACKET TOK_RBRACKET FUNC_STATEMENT
    8         | VARTYPE_INT . DECLARATOR TOK_LBRACKET FUNC_ARGS TOK_RBRACKET TOK_SEMICOLON
    9         | VARTYPE_INT . DECLARATOR TOK_LBRACKET TOK_RBRACKET TOK_SEMICOLON
   12 DECLARATION: VARTYPE_INT . DECLARATOR TOK_SEMICOLON
   13            | VARTYPE_INT . DECLARATOR TOK_EQASSIGN ASSIGN_EXPR TOK_SEMICOLON
   14            | VARTYPE_INT . DECLARATOR TOK_EQASSIGN TOK_LCBRACKET TOK_RCBRACKET TOK_SEMICOLON
   15            | VARTYPE_INT . DECLARATOR TOK_EQASSIGN TOK_LCBRACKET FUNC_CALL_ARGS TOK_RCBRACKET TOK_SEMICOLON

    TOK_VAR  shift, and go to state 7

    DECLARATOR  go to state 8


State 2

    0 $accept: ROOT . $end

    $end  shift, and go to state 9


State 3

    1 ROOT: EXPR_TREE .
    3 EXPR_TREE: EXPR_TREE . EXPR

    VARTYPE_INT  shift, and go to state 1

    $default  reduce using rule 1 (ROOT)

    EXPR         go to state 10
    FUNCTION     go to state 5
    DECLARATION  go to state 6


State 4

    2 EXPR_TREE: EXPR .

    $default  reduce using rule 2 (EXPR_TREE)


State 5

    4 EXPR: FUNCTION .

    $default  reduce using rule 4 (EXPR)


State 6

    5 EXPR: DECLARATION .

    $default  reduce using rule 5 (EXPR)


State 7

   20 DECLARATOR: TOK_VAR .
   21           | TOK_VAR . TOK_LSQBRACKET LOGIC_EXPR TOK_RSQBRACKET
   22           | TOK_VAR . TOK_LSQBRACKET TOK_RSQBRACKET

    TOK_LSQBRACKET  shift, and go to state 11

    $default  reduce using rule 20 (DECLARATOR)


State 8

    6 FUNCTION: VARTYPE_INT DECLARATOR . TOK_LBRACKET FUNC_ARGS TOK_RBRACKET FUNC_STATEMENT
    7         | VARTYPE_INT DECLARATOR . TOK_LBRACKET TOK_RBRACKET FUNC_STATEMENT
    8         | VARTYPE_INT DECLARATOR . TOK_LBRACKET FUNC_ARGS TOK_RBRACKET TOK_SEMICOLON
    9         | VARTYPE_INT DECLARATOR . TOK_LBRACKET TOK_RBRACKET TOK_SEMICOLON
   12 DECLARATION: VARTYPE_INT DECLARATOR . TOK_SEMICOLON
   13            | VARTYPE_INT DECLARATOR . TOK_EQASSIGN ASSIGN_EXPR TOK_SEMICOLON
   14            | VARTYPE_INT DECLARATOR . TOK_EQASSIGN TOK_LCBRACKET TOK_RCBRACKET TOK_SEMICOLON
   15            | VARTYPE_INT DECLARATOR . TOK_EQASSIGN TOK_LCBRACKET FUNC_CALL_ARGS TOK_RCBRACKET TOK_SEMICOLON

    TOK_LBRACKET   shift, and go to state 12
    TOK_SEMICOLON  shift, and go to state 13
    TOK_EQASSIGN   shift, and go to state 14


State 9

    0 $accept: ROOT $end .

    $default  accept


State 10

    3 EXPR_TREE: EXPR_TREE EXPR .

    $default  reduce using rule 3 (EXPR_TREE)


State 11

   21 DECLARATOR: TOK_VAR TOK_LSQBRACKET . LOGIC_EXPR TOK_RSQBRACKET
   22           | TOK_VAR TOK_LSQBRACKET . TOK_RSQBRACKET

    TOK_LOGIC_NOT   shift, and go to state 15
    TOK_BIT_NOT     shift, and go to state 16
    TOK_MINUS       shift, and go to state 17
    TOK_LBRACKET    shift, and go to state 18
    TOK_RSQBRACKET  shift, and go to state 19
    TOK_N           shift, and go to state 20
    TOK_VAR         shift, and go to state 21

    LOGIC_EXPR  go to state 22
    BIT_EXPR    go to state 23
    EQ_EXPR     go to state 24
    REL_EXPR    go to state 25
    SHIFT_EXPR  go to state 26
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 12

    6 FUNCTION: VARTYPE_INT DECLARATOR TOK_LBRACKET . FUNC_ARGS TOK_RBRACKET FUNC_STATEMENT
    7         | VARTYPE_INT DECLARATOR TOK_LBRACKET . TOK_RBRACKET FUNC_STATEMENT
    8         | VARTYPE_INT DECLARATOR TOK_LBRACKET . FUNC_ARGS TOK_RBRACKET TOK_SEMICOLON
    9         | VARTYPE_INT DECLARATOR TOK_LBRACKET . TOK_RBRACKET TOK_SEMICOLON

    TOK_RBRACKET  shift, and go to state 31
    VARTYPE_INT   shift, and go to state 32

    FUNC_ARGS  go to state 33


State 13

   12 DECLARATION: VARTYPE_INT DECLARATOR TOK_SEMICOLON .

    $default  reduce using rule 12 (DECLARATION)


State 14

   13 DECLARATION: VARTYPE_INT DECLARATOR TOK_EQASSIGN . ASSIGN_EXPR TOK_SEMICOLON
   14            | VARTYPE_INT DECLARATOR TOK_EQASSIGN . TOK_LCBRACKET TOK_RCBRACKET TOK_SEMICOLON
   15            | VARTYPE_INT DECLARATOR TOK_EQASSIGN . TOK_LCBRACKET FUNC_CALL_ARGS TOK_RCBRACKET TOK_SEMICOLON

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_LCBRACKET  shift, and go to state 34
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR  go to state 36
    LOGIC_EXPR   go to state 37
    BIT_EXPR     go to state 23
    EQ_EXPR      go to state 24
    REL_EXPR     go to state 25
    SHIFT_EXPR   go to state 26
    ADD_EXPR     go to state 27
    MULT_EXPR    go to state 28
    UNARY        go to state 29
    FACTOR       go to state 30


State 15

   57 UNARY: TOK_LOGIC_NOT . UNARY

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    UNARY   go to state 38
    FACTOR  go to state 30


State 16

   58 UNARY: TOK_BIT_NOT . UNARY

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    UNARY   go to state 39
    FACTOR  go to state 30


State 17

   56 UNARY: TOK_MINUS . UNARY

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    UNARY   go to state 40
    FACTOR  go to state 30


State 18

   61 FACTOR: TOK_LBRACKET . ASSIGN_EXPR TOK_RBRACKET

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR  go to state 41
    LOGIC_EXPR   go to state 37
    BIT_EXPR     go to state 23
    EQ_EXPR      go to state 24
    REL_EXPR     go to state 25
    SHIFT_EXPR   go to state 26
    ADD_EXPR     go to state 27
    MULT_EXPR    go to state 28
    UNARY        go to state 29
    FACTOR       go to state 30


State 19

   22 DECLARATOR: TOK_VAR TOK_LSQBRACKET TOK_RSQBRACKET .

    $default  reduce using rule 22 (DECLARATOR)


State 20

   59 FACTOR: TOK_N .

    $default  reduce using rule 59 (FACTOR)


State 21

   60 FACTOR: TOK_VAR .
   62       | TOK_VAR . TOK_LBRACKET TOK_RBRACKET
   63       | TOK_VAR . TOK_LBRACKET FUNC_CALL_ARGS TOK_RBRACKET

    TOK_LBRACKET  shift, and go to state 42

    $default  reduce using rule 60 (FACTOR)


State 22

   21 DECLARATOR: TOK_VAR TOK_LSQBRACKET LOGIC_EXPR . TOK_RSQBRACKET
   31 LOGIC_EXPR: LOGIC_EXPR . TOK_LOGIC_AND BIT_EXPR
   32           | LOGIC_EXPR . TOK_LOGIC_OR BIT_EXPR

    TOK_LOGIC_AND   shift, and go to state 43
    TOK_LOGIC_OR    shift, and go to state 44
    TOK_RSQBRACKET  shift, and go to state 45


State 23

   30 LOGIC_EXPR: BIT_EXPR .
   34 BIT_EXPR: BIT_EXPR . TOK_BIT_AND EQ_EXPR
   35         | BIT_EXPR . TOK_BIT_OR EQ_EXPR
   36         | BIT_EXPR . TOK_BIT_XOR EQ_EXPR

    TOK_BIT_AND  shift, and go to state 46
    TOK_BIT_OR   shift, and go to state 47
    TOK_BIT_XOR  shift, and go to state 48

    $default  reduce using rule 30 (LOGIC_EXPR)


State 24

   33 BIT_EXPR: EQ_EXPR .
   38 EQ_EXPR: EQ_EXPR . TOK_EQ REL_EXPR
   39        | EQ_EXPR . TOK_NEQ REL_EXPR

    TOK_EQ   shift, and go to state 49
    TOK_NEQ  shift, and go to state 50

    $default  reduce using rule 33 (BIT_EXPR)


State 25

   37 EQ_EXPR: REL_EXPR .
   41 REL_EXPR: REL_EXPR . TOK_LE SHIFT_EXPR
   42         | REL_EXPR . TOK_GE SHIFT_EXPR
   43         | REL_EXPR . TOK_G SHIFT_EXPR
   44         | REL_EXPR . TOK_L SHIFT_EXPR

    TOK_GE  shift, and go to state 51
    TOK_LE  shift, and go to state 52
    TOK_G   shift, and go to state 53
    TOK_L   shift, and go to state 54

    $default  reduce using rule 37 (EQ_EXPR)


State 26

   40 REL_EXPR: SHIFT_EXPR .
   46 SHIFT_EXPR: SHIFT_EXPR . TOK_LSHIFT ADD_EXPR
   47           | SHIFT_EXPR . TOK_RSHIFT ADD_EXPR

    TOK_LSHIFT  shift, and go to state 55
    TOK_RSHIFT  shift, and go to state 56

    $default  reduce using rule 40 (REL_EXPR)


State 27

   45 SHIFT_EXPR: ADD_EXPR .
   49 ADD_EXPR: ADD_EXPR . TOK_PLUS MULT_EXPR
   50         | ADD_EXPR . TOK_MINUS MULT_EXPR

    TOK_PLUS   shift, and go to state 57
    TOK_MINUS  shift, and go to state 58

    $default  reduce using rule 45 (SHIFT_EXPR)


State 28

   48 ADD_EXPR: MULT_EXPR .
   52 MULT_EXPR: MULT_EXPR . TOK_MUL UNARY
   53          | MULT_EXPR . TOK_DIVIDE UNARY
   54          | MULT_EXPR . TOK_MOD UNARY

    TOK_MUL     shift, and go to state 59
    TOK_DIVIDE  shift, and go to state 60
    TOK_MOD     shift, and go to state 61

    $default  reduce using rule 48 (ADD_EXPR)


State 29

   51 MULT_EXPR: UNARY .

    $default  reduce using rule 51 (MULT_EXPR)


State 30

   55 UNARY: FACTOR .

    $default  reduce using rule 55 (UNARY)


State 31

    7 FUNCTION: VARTYPE_INT DECLARATOR TOK_LBRACKET TOK_RBRACKET . FUNC_STATEMENT
    9         | VARTYPE_INT DECLARATOR TOK_LBRACKET TOK_RBRACKET . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 62
    TOK_LCBRACKET  shift, and go to state 63

    FUNC_STATEMENT  go to state 64


State 32

   16 FUNC_ARGS: VARTYPE_INT . DECLARATOR

    TOK_VAR  shift, and go to state 7

    DECLARATOR  go to state 65


State 33

    6 FUNCTION: VARTYPE_INT DECLARATOR TOK_LBRACKET FUNC_ARGS . TOK_RBRACKET FUNC_STATEMENT
    8         | VARTYPE_INT DECLARATOR TOK_LBRACKET FUNC_ARGS . TOK_RBRACKET TOK_SEMICOLON
   17 FUNC_ARGS: FUNC_ARGS . TOK_COMMA FUNC_ARGS

    TOK_RBRACKET  shift, and go to state 66
    TOK_COMMA     shift, and go to state 67


State 34

   14 DECLARATION: VARTYPE_INT DECLARATOR TOK_EQASSIGN TOK_LCBRACKET . TOK_RCBRACKET TOK_SEMICOLON
   15            | VARTYPE_INT DECLARATOR TOK_EQASSIGN TOK_LCBRACKET . FUNC_CALL_ARGS TOK_RCBRACKET TOK_SEMICOLON

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_RCBRACKET  shift, and go to state 68
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    FUNC_CALL_ARGS  go to state 69
    ASSIGN_EXPR     go to state 70
    LOGIC_EXPR      go to state 37
    BIT_EXPR        go to state 23
    EQ_EXPR         go to state 24
    REL_EXPR        go to state 25
    SHIFT_EXPR      go to state 26
    ADD_EXPR        go to state 27
    MULT_EXPR       go to state 28
    UNARY           go to state 29
    FACTOR          go to state 30


State 35

   24 ASSIGN_EXPR: TOK_VAR . TOK_EQASSIGN ASSIGN_EXPR
   25            | TOK_VAR . TOK_ADDASSIGN ASSIGN_EXPR
   26            | TOK_VAR . TOK_SUBASSIGN ASSIGN_EXPR
   27            | TOK_VAR . TOK_MULASSIGN ASSIGN_EXPR
   28            | TOK_VAR . TOK_DIVASSIGN ASSIGN_EXPR
   29            | TOK_VAR . TOK_MODASSIGN ASSIGN_EXPR
   60 FACTOR: TOK_VAR .
   62       | TOK_VAR . TOK_LBRACKET TOK_RBRACKET
   63       | TOK_VAR . TOK_LBRACKET FUNC_CALL_ARGS TOK_RBRACKET

    TOK_LBRACKET   shift, and go to state 42
    TOK_SUBASSIGN  shift, and go to state 71
    TOK_MULASSIGN  shift, and go to state 72
    TOK_DIVASSIGN  shift, and go to state 73
    TOK_ADDASSIGN  shift, and go to state 74
    TOK_EQASSIGN   shift, and go to state 75
    TOK_MODASSIGN  shift, and go to state 76

    $default  reduce using rule 60 (FACTOR)


State 36

   13 DECLARATION: VARTYPE_INT DECLARATOR TOK_EQASSIGN ASSIGN_EXPR . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 77


State 37

   23 ASSIGN_EXPR: LOGIC_EXPR .
   31 LOGIC_EXPR: LOGIC_EXPR . TOK_LOGIC_AND BIT_EXPR
   32           | LOGIC_EXPR . TOK_LOGIC_OR BIT_EXPR

    TOK_LOGIC_AND  shift, and go to state 43
    TOK_LOGIC_OR   shift, and go to state 44

    $default  reduce using rule 23 (ASSIGN_EXPR)


State 38

   57 UNARY: TOK_LOGIC_NOT UNARY .

    $default  reduce using rule 57 (UNARY)


State 39

   58 UNARY: TOK_BIT_NOT UNARY .

    $default  reduce using rule 58 (UNARY)


State 40

   56 UNARY: TOK_MINUS UNARY .

    $default  reduce using rule 56 (UNARY)


State 41

   61 FACTOR: TOK_LBRACKET ASSIGN_EXPR . TOK_RBRACKET

    TOK_RBRACKET  shift, and go to state 78


State 42

   62 FACTOR: TOK_VAR TOK_LBRACKET . TOK_RBRACKET
   63       | TOK_VAR TOK_LBRACKET . FUNC_CALL_ARGS TOK_RBRACKET

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_RBRACKET   shift, and go to state 79
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    FUNC_CALL_ARGS  go to state 80
    ASSIGN_EXPR     go to state 70
    LOGIC_EXPR      go to state 37
    BIT_EXPR        go to state 23
    EQ_EXPR         go to state 24
    REL_EXPR        go to state 25
    SHIFT_EXPR      go to state 26
    ADD_EXPR        go to state 27
    MULT_EXPR       go to state 28
    UNARY           go to state 29
    FACTOR          go to state 30


State 43

   31 LOGIC_EXPR: LOGIC_EXPR TOK_LOGIC_AND . BIT_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    BIT_EXPR    go to state 81
    EQ_EXPR     go to state 24
    REL_EXPR    go to state 25
    SHIFT_EXPR  go to state 26
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 44

   32 LOGIC_EXPR: LOGIC_EXPR TOK_LOGIC_OR . BIT_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    BIT_EXPR    go to state 82
    EQ_EXPR     go to state 24
    REL_EXPR    go to state 25
    SHIFT_EXPR  go to state 26
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 45

   21 DECLARATOR: TOK_VAR TOK_LSQBRACKET LOGIC_EXPR TOK_RSQBRACKET .

    $default  reduce using rule 21 (DECLARATOR)


State 46

   34 BIT_EXPR: BIT_EXPR TOK_BIT_AND . EQ_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    EQ_EXPR     go to state 83
    REL_EXPR    go to state 25
    SHIFT_EXPR  go to state 26
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 47

   35 BIT_EXPR: BIT_EXPR TOK_BIT_OR . EQ_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    EQ_EXPR     go to state 84
    REL_EXPR    go to state 25
    SHIFT_EXPR  go to state 26
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 48

   36 BIT_EXPR: BIT_EXPR TOK_BIT_XOR . EQ_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    EQ_EXPR     go to state 85
    REL_EXPR    go to state 25
    SHIFT_EXPR  go to state 26
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 49

   38 EQ_EXPR: EQ_EXPR TOK_EQ . REL_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    REL_EXPR    go to state 86
    SHIFT_EXPR  go to state 26
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 50

   39 EQ_EXPR: EQ_EXPR TOK_NEQ . REL_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    REL_EXPR    go to state 87
    SHIFT_EXPR  go to state 26
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 51

   42 REL_EXPR: REL_EXPR TOK_GE . SHIFT_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    SHIFT_EXPR  go to state 88
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 52

   41 REL_EXPR: REL_EXPR TOK_LE . SHIFT_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    SHIFT_EXPR  go to state 89
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 53

   43 REL_EXPR: REL_EXPR TOK_G . SHIFT_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    SHIFT_EXPR  go to state 90
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 54

   44 REL_EXPR: REL_EXPR TOK_L . SHIFT_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    SHIFT_EXPR  go to state 91
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 55

   46 SHIFT_EXPR: SHIFT_EXPR TOK_LSHIFT . ADD_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    ADD_EXPR   go to state 92
    MULT_EXPR  go to state 28
    UNARY      go to state 29
    FACTOR     go to state 30


State 56

   47 SHIFT_EXPR: SHIFT_EXPR TOK_RSHIFT . ADD_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    ADD_EXPR   go to state 93
    MULT_EXPR  go to state 28
    UNARY      go to state 29
    FACTOR     go to state 30


State 57

   49 ADD_EXPR: ADD_EXPR TOK_PLUS . MULT_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    MULT_EXPR  go to state 94
    UNARY      go to state 29
    FACTOR     go to state 30


State 58

   50 ADD_EXPR: ADD_EXPR TOK_MINUS . MULT_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    MULT_EXPR  go to state 95
    UNARY      go to state 29
    FACTOR     go to state 30


State 59

   52 MULT_EXPR: MULT_EXPR TOK_MUL . UNARY

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    UNARY   go to state 96
    FACTOR  go to state 30


State 60

   53 MULT_EXPR: MULT_EXPR TOK_DIVIDE . UNARY

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    UNARY   go to state 97
    FACTOR  go to state 30


State 61

   54 MULT_EXPR: MULT_EXPR TOK_MOD . UNARY

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    UNARY   go to state 98
    FACTOR  go to state 30


State 62

    9 FUNCTION: VARTYPE_INT DECLARATOR TOK_LBRACKET TOK_RBRACKET TOK_SEMICOLON .

    $default  reduce using rule 9 (FUNCTION)


State 63

   72 FUNC_STATEMENT: TOK_LCBRACKET . TOK_RCBRACKET
   73               | TOK_LCBRACKET . REC_STATEMENT TOK_RCBRACKET
   74               | TOK_LCBRACKET . REC_DECLARATION TOK_RCBRACKET
   75               | TOK_LCBRACKET . REC_DECLARATION REC_STATEMENT TOK_RCBRACKET

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_IF         shift, and go to state 99
    TOK_WHILE      shift, and go to state 100
    TOK_RETURN     shift, and go to state 101
    TOK_BREAK      shift, and go to state 102
    TOK_CONT       shift, and go to state 103
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_LCBRACKET  shift, and go to state 63
    TOK_RCBRACKET  shift, and go to state 104
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35
    VARTYPE_INT    shift, and go to state 105

    REC_DECLARATION   go to state 106
    DECLARATION       go to state 107
    ASSIGN_EXPR       go to state 108
    LOGIC_EXPR        go to state 37
    BIT_EXPR          go to state 23
    EQ_EXPR           go to state 24
    REL_EXPR          go to state 25
    SHIFT_EXPR        go to state 26
    ADD_EXPR          go to state 27
    MULT_EXPR         go to state 28
    UNARY             go to state 29
    FACTOR            go to state 30
    REC_STATEMENT     go to state 109
    STATEMENT         go to state 110
    EXPR_STATEMENT    go to state 111
    FUNC_STATEMENT    go to state 112
    SELECT_STATEMENT  go to state 113
    ITER_STATEMENT    go to state 114
    JUMP_STATEMENT    go to state 115


State 64

    7 FUNCTION: VARTYPE_INT DECLARATOR TOK_LBRACKET TOK_RBRACKET FUNC_STATEMENT .

    $default  reduce using rule 7 (FUNCTION)


State 65

   16 FUNC_ARGS: VARTYPE_INT DECLARATOR .

    $default  reduce using rule 16 (FUNC_ARGS)


State 66

    6 FUNCTION: VARTYPE_INT DECLARATOR TOK_LBRACKET FUNC_ARGS TOK_RBRACKET . FUNC_STATEMENT
    8         | VARTYPE_INT DECLARATOR TOK_LBRACKET FUNC_ARGS TOK_RBRACKET . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 116
    TOK_LCBRACKET  shift, and go to state 63

    FUNC_STATEMENT  go to state 117


State 67

   17 FUNC_ARGS: FUNC_ARGS TOK_COMMA . FUNC_ARGS

    VARTYPE_INT  shift, and go to state 32

    FUNC_ARGS  go to state 118


State 68

   14 DECLARATION: VARTYPE_INT DECLARATOR TOK_EQASSIGN TOK_LCBRACKET TOK_RCBRACKET . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 119


State 69

   15 DECLARATION: VARTYPE_INT DECLARATOR TOK_EQASSIGN TOK_LCBRACKET FUNC_CALL_ARGS . TOK_RCBRACKET TOK_SEMICOLON
   19 FUNC_CALL_ARGS: FUNC_CALL_ARGS . TOK_COMMA ASSIGN_EXPR

    TOK_RCBRACKET  shift, and go to state 120
    TOK_COMMA      shift, and go to state 121


State 70

   18 FUNC_CALL_ARGS: ASSIGN_EXPR .

    $default  reduce using rule 18 (FUNC_CALL_ARGS)


State 71

   26 ASSIGN_EXPR: TOK_VAR TOK_SUBASSIGN . ASSIGN_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR  go to state 122
    LOGIC_EXPR   go to state 37
    BIT_EXPR     go to state 23
    EQ_EXPR      go to state 24
    REL_EXPR     go to state 25
    SHIFT_EXPR   go to state 26
    ADD_EXPR     go to state 27
    MULT_EXPR    go to state 28
    UNARY        go to state 29
    FACTOR       go to state 30


State 72

   27 ASSIGN_EXPR: TOK_VAR TOK_MULASSIGN . ASSIGN_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR  go to state 123
    LOGIC_EXPR   go to state 37
    BIT_EXPR     go to state 23
    EQ_EXPR      go to state 24
    REL_EXPR     go to state 25
    SHIFT_EXPR   go to state 26
    ADD_EXPR     go to state 27
    MULT_EXPR    go to state 28
    UNARY        go to state 29
    FACTOR       go to state 30


State 73

   28 ASSIGN_EXPR: TOK_VAR TOK_DIVASSIGN . ASSIGN_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR  go to state 124
    LOGIC_EXPR   go to state 37
    BIT_EXPR     go to state 23
    EQ_EXPR      go to state 24
    REL_EXPR     go to state 25
    SHIFT_EXPR   go to state 26
    ADD_EXPR     go to state 27
    MULT_EXPR    go to state 28
    UNARY        go to state 29
    FACTOR       go to state 30


State 74

   25 ASSIGN_EXPR: TOK_VAR TOK_ADDASSIGN . ASSIGN_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR  go to state 125
    LOGIC_EXPR   go to state 37
    BIT_EXPR     go to state 23
    EQ_EXPR      go to state 24
    REL_EXPR     go to state 25
    SHIFT_EXPR   go to state 26
    ADD_EXPR     go to state 27
    MULT_EXPR    go to state 28
    UNARY        go to state 29
    FACTOR       go to state 30


State 75

   24 ASSIGN_EXPR: TOK_VAR TOK_EQASSIGN . ASSIGN_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR  go to state 126
    LOGIC_EXPR   go to state 37
    BIT_EXPR     go to state 23
    EQ_EXPR      go to state 24
    REL_EXPR     go to state 25
    SHIFT_EXPR   go to state 26
    ADD_EXPR     go to state 27
    MULT_EXPR    go to state 28
    UNARY        go to state 29
    FACTOR       go to state 30


State 76

   29 ASSIGN_EXPR: TOK_VAR TOK_MODASSIGN . ASSIGN_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR  go to state 127
    LOGIC_EXPR   go to state 37
    BIT_EXPR     go to state 23
    EQ_EXPR      go to state 24
    REL_EXPR     go to state 25
    SHIFT_EXPR   go to state 26
    ADD_EXPR     go to state 27
    MULT_EXPR    go to state 28
    UNARY        go to state 29
    FACTOR       go to state 30


State 77

   13 DECLARATION: VARTYPE_INT DECLARATOR TOK_EQASSIGN ASSIGN_EXPR TOK_SEMICOLON .

    $default  reduce using rule 13 (DECLARATION)


State 78

   61 FACTOR: TOK_LBRACKET ASSIGN_EXPR TOK_RBRACKET .

    $default  reduce using rule 61 (FACTOR)


State 79

   62 FACTOR: TOK_VAR TOK_LBRACKET TOK_RBRACKET .

    $default  reduce using rule 62 (FACTOR)


State 80

   19 FUNC_CALL_ARGS: FUNC_CALL_ARGS . TOK_COMMA ASSIGN_EXPR
   63 FACTOR: TOK_VAR TOK_LBRACKET FUNC_CALL_ARGS . TOK_RBRACKET

    TOK_RBRACKET  shift, and go to state 128
    TOK_COMMA     shift, and go to state 121


State 81

   31 LOGIC_EXPR: LOGIC_EXPR TOK_LOGIC_AND BIT_EXPR .
   34 BIT_EXPR: BIT_EXPR . TOK_BIT_AND EQ_EXPR
   35         | BIT_EXPR . TOK_BIT_OR EQ_EXPR
   36         | BIT_EXPR . TOK_BIT_XOR EQ_EXPR

    TOK_BIT_AND  shift, and go to state 46
    TOK_BIT_OR   shift, and go to state 47
    TOK_BIT_XOR  shift, and go to state 48

    $default  reduce using rule 31 (LOGIC_EXPR)


State 82

   32 LOGIC_EXPR: LOGIC_EXPR TOK_LOGIC_OR BIT_EXPR .
   34 BIT_EXPR: BIT_EXPR . TOK_BIT_AND EQ_EXPR
   35         | BIT_EXPR . TOK_BIT_OR EQ_EXPR
   36         | BIT_EXPR . TOK_BIT_XOR EQ_EXPR

    TOK_BIT_AND  shift, and go to state 46
    TOK_BIT_OR   shift, and go to state 47
    TOK_BIT_XOR  shift, and go to state 48

    $default  reduce using rule 32 (LOGIC_EXPR)


State 83

   34 BIT_EXPR: BIT_EXPR TOK_BIT_AND EQ_EXPR .
   38 EQ_EXPR: EQ_EXPR . TOK_EQ REL_EXPR
   39        | EQ_EXPR . TOK_NEQ REL_EXPR

    TOK_EQ   shift, and go to state 49
    TOK_NEQ  shift, and go to state 50

    $default  reduce using rule 34 (BIT_EXPR)


State 84

   35 BIT_EXPR: BIT_EXPR TOK_BIT_OR EQ_EXPR .
   38 EQ_EXPR: EQ_EXPR . TOK_EQ REL_EXPR
   39        | EQ_EXPR . TOK_NEQ REL_EXPR

    TOK_EQ   shift, and go to state 49
    TOK_NEQ  shift, and go to state 50

    $default  reduce using rule 35 (BIT_EXPR)


State 85

   36 BIT_EXPR: BIT_EXPR TOK_BIT_XOR EQ_EXPR .
   38 EQ_EXPR: EQ_EXPR . TOK_EQ REL_EXPR
   39        | EQ_EXPR . TOK_NEQ REL_EXPR

    TOK_EQ   shift, and go to state 49
    TOK_NEQ  shift, and go to state 50

    $default  reduce using rule 36 (BIT_EXPR)


State 86

   38 EQ_EXPR: EQ_EXPR TOK_EQ REL_EXPR .
   41 REL_EXPR: REL_EXPR . TOK_LE SHIFT_EXPR
   42         | REL_EXPR . TOK_GE SHIFT_EXPR
   43         | REL_EXPR . TOK_G SHIFT_EXPR
   44         | REL_EXPR . TOK_L SHIFT_EXPR

    TOK_GE  shift, and go to state 51
    TOK_LE  shift, and go to state 52
    TOK_G   shift, and go to state 53
    TOK_L   shift, and go to state 54

    $default  reduce using rule 38 (EQ_EXPR)


State 87

   39 EQ_EXPR: EQ_EXPR TOK_NEQ REL_EXPR .
   41 REL_EXPR: REL_EXPR . TOK_LE SHIFT_EXPR
   42         | REL_EXPR . TOK_GE SHIFT_EXPR
   43         | REL_EXPR . TOK_G SHIFT_EXPR
   44         | REL_EXPR . TOK_L SHIFT_EXPR

    TOK_GE  shift, and go to state 51
    TOK_LE  shift, and go to state 52
    TOK_G   shift, and go to state 53
    TOK_L   shift, and go to state 54

    $default  reduce using rule 39 (EQ_EXPR)


State 88

   42 REL_EXPR: REL_EXPR TOK_GE SHIFT_EXPR .
   46 SHIFT_EXPR: SHIFT_EXPR . TOK_LSHIFT ADD_EXPR
   47           | SHIFT_EXPR . TOK_RSHIFT ADD_EXPR

    TOK_LSHIFT  shift, and go to state 55
    TOK_RSHIFT  shift, and go to state 56

    $default  reduce using rule 42 (REL_EXPR)


State 89

   41 REL_EXPR: REL_EXPR TOK_LE SHIFT_EXPR .
   46 SHIFT_EXPR: SHIFT_EXPR . TOK_LSHIFT ADD_EXPR
   47           | SHIFT_EXPR . TOK_RSHIFT ADD_EXPR

    TOK_LSHIFT  shift, and go to state 55
    TOK_RSHIFT  shift, and go to state 56

    $default  reduce using rule 41 (REL_EXPR)


State 90

   43 REL_EXPR: REL_EXPR TOK_G SHIFT_EXPR .
   46 SHIFT_EXPR: SHIFT_EXPR . TOK_LSHIFT ADD_EXPR
   47           | SHIFT_EXPR . TOK_RSHIFT ADD_EXPR

    TOK_LSHIFT  shift, and go to state 55
    TOK_RSHIFT  shift, and go to state 56

    $default  reduce using rule 43 (REL_EXPR)


State 91

   44 REL_EXPR: REL_EXPR TOK_L SHIFT_EXPR .
   46 SHIFT_EXPR: SHIFT_EXPR . TOK_LSHIFT ADD_EXPR
   47           | SHIFT_EXPR . TOK_RSHIFT ADD_EXPR

    TOK_LSHIFT  shift, and go to state 55
    TOK_RSHIFT  shift, and go to state 56

    $default  reduce using rule 44 (REL_EXPR)


State 92

   46 SHIFT_EXPR: SHIFT_EXPR TOK_LSHIFT ADD_EXPR .
   49 ADD_EXPR: ADD_EXPR . TOK_PLUS MULT_EXPR
   50         | ADD_EXPR . TOK_MINUS MULT_EXPR

    TOK_PLUS   shift, and go to state 57
    TOK_MINUS  shift, and go to state 58

    $default  reduce using rule 46 (SHIFT_EXPR)


State 93

   47 SHIFT_EXPR: SHIFT_EXPR TOK_RSHIFT ADD_EXPR .
   49 ADD_EXPR: ADD_EXPR . TOK_PLUS MULT_EXPR
   50         | ADD_EXPR . TOK_MINUS MULT_EXPR

    TOK_PLUS   shift, and go to state 57
    TOK_MINUS  shift, and go to state 58

    $default  reduce using rule 47 (SHIFT_EXPR)


State 94

   49 ADD_EXPR: ADD_EXPR TOK_PLUS MULT_EXPR .
   52 MULT_EXPR: MULT_EXPR . TOK_MUL UNARY
   53          | MULT_EXPR . TOK_DIVIDE UNARY
   54          | MULT_EXPR . TOK_MOD UNARY

    TOK_MUL     shift, and go to state 59
    TOK_DIVIDE  shift, and go to state 60
    TOK_MOD     shift, and go to state 61

    $default  reduce using rule 49 (ADD_EXPR)


State 95

   50 ADD_EXPR: ADD_EXPR TOK_MINUS MULT_EXPR .
   52 MULT_EXPR: MULT_EXPR . TOK_MUL UNARY
   53          | MULT_EXPR . TOK_DIVIDE UNARY
   54          | MULT_EXPR . TOK_MOD UNARY

    TOK_MUL     shift, and go to state 59
    TOK_DIVIDE  shift, and go to state 60
    TOK_MOD     shift, and go to state 61

    $default  reduce using rule 50 (ADD_EXPR)


State 96

   52 MULT_EXPR: MULT_EXPR TOK_MUL UNARY .

    $default  reduce using rule 52 (MULT_EXPR)


State 97

   53 MULT_EXPR: MULT_EXPR TOK_DIVIDE UNARY .

    $default  reduce using rule 53 (MULT_EXPR)


State 98

   54 MULT_EXPR: MULT_EXPR TOK_MOD UNARY .

    $default  reduce using rule 54 (MULT_EXPR)


State 99

   76 SELECT_STATEMENT: TOK_IF . TOK_LBRACKET LOGIC_EXPR TOK_RBRACKET STATEMENT
   77                 | TOK_IF . TOK_LBRACKET LOGIC_EXPR TOK_RBRACKET STATEMENT TOK_ELSE STATEMENT

    TOK_LBRACKET  shift, and go to state 129


State 100

   78 ITER_STATEMENT: TOK_WHILE . TOK_LBRACKET ASSIGN_EXPR TOK_RBRACKET STATEMENT

    TOK_LBRACKET  shift, and go to state 130


State 101

   81 JUMP_STATEMENT: TOK_RETURN . TOK_SEMICOLON
   82               | TOK_RETURN . FUNCTION TOK_SEMICOLON
   83               | TOK_RETURN . LOGIC_EXPR TOK_SEMICOLON

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_SEMICOLON  shift, and go to state 131
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21
    VARTYPE_INT    shift, and go to state 132

    FUNCTION    go to state 133
    LOGIC_EXPR  go to state 134
    BIT_EXPR    go to state 23
    EQ_EXPR     go to state 24
    REL_EXPR    go to state 25
    SHIFT_EXPR  go to state 26
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 102

   79 JUMP_STATEMENT: TOK_BREAK . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 135


State 103

   80 JUMP_STATEMENT: TOK_CONT . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 136


State 104

   72 FUNC_STATEMENT: TOK_LCBRACKET TOK_RCBRACKET .

    $default  reduce using rule 72 (FUNC_STATEMENT)


State 105

   12 DECLARATION: VARTYPE_INT . DECLARATOR TOK_SEMICOLON
   13            | VARTYPE_INT . DECLARATOR TOK_EQASSIGN ASSIGN_EXPR TOK_SEMICOLON
   14            | VARTYPE_INT . DECLARATOR TOK_EQASSIGN TOK_LCBRACKET TOK_RCBRACKET TOK_SEMICOLON
   15            | VARTYPE_INT . DECLARATOR TOK_EQASSIGN TOK_LCBRACKET FUNC_CALL_ARGS TOK_RCBRACKET TOK_SEMICOLON

    TOK_VAR  shift, and go to state 7

    DECLARATOR  go to state 137


State 106

   11 REC_DECLARATION: REC_DECLARATION . DECLARATION
   74 FUNC_STATEMENT: TOK_LCBRACKET REC_DECLARATION . TOK_RCBRACKET
   75               | TOK_LCBRACKET REC_DECLARATION . REC_STATEMENT TOK_RCBRACKET

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_IF         shift, and go to state 99
    TOK_WHILE      shift, and go to state 100
    TOK_RETURN     shift, and go to state 101
    TOK_BREAK      shift, and go to state 102
    TOK_CONT       shift, and go to state 103
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_LCBRACKET  shift, and go to state 63
    TOK_RCBRACKET  shift, and go to state 138
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35
    VARTYPE_INT    shift, and go to state 105

    DECLARATION       go to state 139
    ASSIGN_EXPR       go to state 108
    LOGIC_EXPR        go to state 37
    BIT_EXPR          go to state 23
    EQ_EXPR           go to state 24
    REL_EXPR          go to state 25
    SHIFT_EXPR        go to state 26
    ADD_EXPR          go to state 27
    MULT_EXPR         go to state 28
    UNARY             go to state 29
    FACTOR            go to state 30
    REC_STATEMENT     go to state 140
    STATEMENT         go to state 110
    EXPR_STATEMENT    go to state 111
    FUNC_STATEMENT    go to state 112
    SELECT_STATEMENT  go to state 113
    ITER_STATEMENT    go to state 114
    JUMP_STATEMENT    go to state 115


State 107

   10 REC_DECLARATION: DECLARATION .

    $default  reduce using rule 10 (REC_DECLARATION)


State 108

   71 EXPR_STATEMENT: ASSIGN_EXPR . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 141


State 109

   65 REC_STATEMENT: REC_STATEMENT . STATEMENT
   73 FUNC_STATEMENT: TOK_LCBRACKET REC_STATEMENT . TOK_RCBRACKET

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_IF         shift, and go to state 99
    TOK_WHILE      shift, and go to state 100
    TOK_RETURN     shift, and go to state 101
    TOK_BREAK      shift, and go to state 102
    TOK_CONT       shift, and go to state 103
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_LCBRACKET  shift, and go to state 63
    TOK_RCBRACKET  shift, and go to state 142
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR       go to state 108
    LOGIC_EXPR        go to state 37
    BIT_EXPR          go to state 23
    EQ_EXPR           go to state 24
    REL_EXPR          go to state 25
    SHIFT_EXPR        go to state 26
    ADD_EXPR          go to state 27
    MULT_EXPR         go to state 28
    UNARY             go to state 29
    FACTOR            go to state 30
    STATEMENT         go to state 143
    EXPR_STATEMENT    go to state 111
    FUNC_STATEMENT    go to state 112
    SELECT_STATEMENT  go to state 113
    ITER_STATEMENT    go to state 114
    JUMP_STATEMENT    go to state 115


State 110

   64 REC_STATEMENT: STATEMENT .

    $default  reduce using rule 64 (REC_STATEMENT)


State 111

   66 STATEMENT: EXPR_STATEMENT .

    $default  reduce using rule 66 (STATEMENT)


State 112

   70 STATEMENT: FUNC_STATEMENT .

    $default  reduce using rule 70 (STATEMENT)


State 113

   69 STATEMENT: SELECT_STATEMENT .

    $default  reduce using rule 69 (STATEMENT)


State 114

   67 STATEMENT: ITER_STATEMENT .

    $default  reduce using rule 67 (STATEMENT)


State 115

   68 STATEMENT: JUMP_STATEMENT .

    $default  reduce using rule 68 (STATEMENT)


State 116

    8 FUNCTION: VARTYPE_INT DECLARATOR TOK_LBRACKET FUNC_ARGS TOK_RBRACKET TOK_SEMICOLON .

    $default  reduce using rule 8 (FUNCTION)


State 117

    6 FUNCTION: VARTYPE_INT DECLARATOR TOK_LBRACKET FUNC_ARGS TOK_RBRACKET FUNC_STATEMENT .

    $default  reduce using rule 6 (FUNCTION)


State 118

   17 FUNC_ARGS: FUNC_ARGS . TOK_COMMA FUNC_ARGS
   17          | FUNC_ARGS TOK_COMMA FUNC_ARGS .

    TOK_COMMA  shift, and go to state 67

    TOK_COMMA  [reduce using rule 17 (FUNC_ARGS)]
    $default   reduce using rule 17 (FUNC_ARGS)


State 119

   14 DECLARATION: VARTYPE_INT DECLARATOR TOK_EQASSIGN TOK_LCBRACKET TOK_RCBRACKET TOK_SEMICOLON .

    $default  reduce using rule 14 (DECLARATION)


State 120

   15 DECLARATION: VARTYPE_INT DECLARATOR TOK_EQASSIGN TOK_LCBRACKET FUNC_CALL_ARGS TOK_RCBRACKET . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 144


State 121

   19 FUNC_CALL_ARGS: FUNC_CALL_ARGS TOK_COMMA . ASSIGN_EXPR

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR  go to state 145
    LOGIC_EXPR   go to state 37
    BIT_EXPR     go to state 23
    EQ_EXPR      go to state 24
    REL_EXPR     go to state 25
    SHIFT_EXPR   go to state 26
    ADD_EXPR     go to state 27
    MULT_EXPR    go to state 28
    UNARY        go to state 29
    FACTOR       go to state 30


State 122

   26 ASSIGN_EXPR: TOK_VAR TOK_SUBASSIGN ASSIGN_EXPR .

    $default  reduce using rule 26 (ASSIGN_EXPR)


State 123

   27 ASSIGN_EXPR: TOK_VAR TOK_MULASSIGN ASSIGN_EXPR .

    $default  reduce using rule 27 (ASSIGN_EXPR)


State 124

   28 ASSIGN_EXPR: TOK_VAR TOK_DIVASSIGN ASSIGN_EXPR .

    $default  reduce using rule 28 (ASSIGN_EXPR)


State 125

   25 ASSIGN_EXPR: TOK_VAR TOK_ADDASSIGN ASSIGN_EXPR .

    $default  reduce using rule 25 (ASSIGN_EXPR)


State 126

   24 ASSIGN_EXPR: TOK_VAR TOK_EQASSIGN ASSIGN_EXPR .

    $default  reduce using rule 24 (ASSIGN_EXPR)


State 127

   29 ASSIGN_EXPR: TOK_VAR TOK_MODASSIGN ASSIGN_EXPR .

    $default  reduce using rule 29 (ASSIGN_EXPR)


State 128

   63 FACTOR: TOK_VAR TOK_LBRACKET FUNC_CALL_ARGS TOK_RBRACKET .

    $default  reduce using rule 63 (FACTOR)


State 129

   76 SELECT_STATEMENT: TOK_IF TOK_LBRACKET . LOGIC_EXPR TOK_RBRACKET STATEMENT
   77                 | TOK_IF TOK_LBRACKET . LOGIC_EXPR TOK_RBRACKET STATEMENT TOK_ELSE STATEMENT

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 21

    LOGIC_EXPR  go to state 146
    BIT_EXPR    go to state 23
    EQ_EXPR     go to state 24
    REL_EXPR    go to state 25
    SHIFT_EXPR  go to state 26
    ADD_EXPR    go to state 27
    MULT_EXPR   go to state 28
    UNARY       go to state 29
    FACTOR      go to state 30


State 130

   78 ITER_STATEMENT: TOK_WHILE TOK_LBRACKET . ASSIGN_EXPR TOK_RBRACKET STATEMENT

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR  go to state 147
    LOGIC_EXPR   go to state 37
    BIT_EXPR     go to state 23
    EQ_EXPR      go to state 24
    REL_EXPR     go to state 25
    SHIFT_EXPR   go to state 26
    ADD_EXPR     go to state 27
    MULT_EXPR    go to state 28
    UNARY        go to state 29
    FACTOR       go to state 30


State 131

   81 JUMP_STATEMENT: TOK_RETURN TOK_SEMICOLON .

    $default  reduce using rule 81 (JUMP_STATEMENT)


State 132

    6 FUNCTION: VARTYPE_INT . DECLARATOR TOK_LBRACKET FUNC_ARGS TOK_RBRACKET FUNC_STATEMENT
    7         | VARTYPE_INT . DECLARATOR TOK_LBRACKET TOK_RBRACKET FUNC_STATEMENT
    8         | VARTYPE_INT . DECLARATOR TOK_LBRACKET FUNC_ARGS TOK_RBRACKET TOK_SEMICOLON
    9         | VARTYPE_INT . DECLARATOR TOK_LBRACKET TOK_RBRACKET TOK_SEMICOLON

    TOK_VAR  shift, and go to state 7

    DECLARATOR  go to state 148


State 133

   82 JUMP_STATEMENT: TOK_RETURN FUNCTION . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 149


State 134

   31 LOGIC_EXPR: LOGIC_EXPR . TOK_LOGIC_AND BIT_EXPR
   32           | LOGIC_EXPR . TOK_LOGIC_OR BIT_EXPR
   83 JUMP_STATEMENT: TOK_RETURN LOGIC_EXPR . TOK_SEMICOLON

    TOK_LOGIC_AND  shift, and go to state 43
    TOK_LOGIC_OR   shift, and go to state 44
    TOK_SEMICOLON  shift, and go to state 150


State 135

   79 JUMP_STATEMENT: TOK_BREAK TOK_SEMICOLON .

    $default  reduce using rule 79 (JUMP_STATEMENT)


State 136

   80 JUMP_STATEMENT: TOK_CONT TOK_SEMICOLON .

    $default  reduce using rule 80 (JUMP_STATEMENT)


State 137

   12 DECLARATION: VARTYPE_INT DECLARATOR . TOK_SEMICOLON
   13            | VARTYPE_INT DECLARATOR . TOK_EQASSIGN ASSIGN_EXPR TOK_SEMICOLON
   14            | VARTYPE_INT DECLARATOR . TOK_EQASSIGN TOK_LCBRACKET TOK_RCBRACKET TOK_SEMICOLON
   15            | VARTYPE_INT DECLARATOR . TOK_EQASSIGN TOK_LCBRACKET FUNC_CALL_ARGS TOK_RCBRACKET TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 13
    TOK_EQASSIGN   shift, and go to state 14


State 138

   74 FUNC_STATEMENT: TOK_LCBRACKET REC_DECLARATION TOK_RCBRACKET .

    $default  reduce using rule 74 (FUNC_STATEMENT)


State 139

   11 REC_DECLARATION: REC_DECLARATION DECLARATION .

    $default  reduce using rule 11 (REC_DECLARATION)


State 140

   65 REC_STATEMENT: REC_STATEMENT . STATEMENT
   75 FUNC_STATEMENT: TOK_LCBRACKET REC_DECLARATION REC_STATEMENT . TOK_RCBRACKET

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_IF         shift, and go to state 99
    TOK_WHILE      shift, and go to state 100
    TOK_RETURN     shift, and go to state 101
    TOK_BREAK      shift, and go to state 102
    TOK_CONT       shift, and go to state 103
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_LCBRACKET  shift, and go to state 63
    TOK_RCBRACKET  shift, and go to state 151
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR       go to state 108
    LOGIC_EXPR        go to state 37
    BIT_EXPR          go to state 23
    EQ_EXPR           go to state 24
    REL_EXPR          go to state 25
    SHIFT_EXPR        go to state 26
    ADD_EXPR          go to state 27
    MULT_EXPR         go to state 28
    UNARY             go to state 29
    FACTOR            go to state 30
    STATEMENT         go to state 143
    EXPR_STATEMENT    go to state 111
    FUNC_STATEMENT    go to state 112
    SELECT_STATEMENT  go to state 113
    ITER_STATEMENT    go to state 114
    JUMP_STATEMENT    go to state 115


State 141

   71 EXPR_STATEMENT: ASSIGN_EXPR TOK_SEMICOLON .

    $default  reduce using rule 71 (EXPR_STATEMENT)


State 142

   73 FUNC_STATEMENT: TOK_LCBRACKET REC_STATEMENT TOK_RCBRACKET .

    $default  reduce using rule 73 (FUNC_STATEMENT)


State 143

   65 REC_STATEMENT: REC_STATEMENT STATEMENT .

    $default  reduce using rule 65 (REC_STATEMENT)


State 144

   15 DECLARATION: VARTYPE_INT DECLARATOR TOK_EQASSIGN TOK_LCBRACKET FUNC_CALL_ARGS TOK_RCBRACKET TOK_SEMICOLON .

    $default  reduce using rule 15 (DECLARATION)


State 145

   19 FUNC_CALL_ARGS: FUNC_CALL_ARGS TOK_COMMA ASSIGN_EXPR .

    $default  reduce using rule 19 (FUNC_CALL_ARGS)


State 146

   31 LOGIC_EXPR: LOGIC_EXPR . TOK_LOGIC_AND BIT_EXPR
   32           | LOGIC_EXPR . TOK_LOGIC_OR BIT_EXPR
   76 SELECT_STATEMENT: TOK_IF TOK_LBRACKET LOGIC_EXPR . TOK_RBRACKET STATEMENT
   77                 | TOK_IF TOK_LBRACKET LOGIC_EXPR . TOK_RBRACKET STATEMENT TOK_ELSE STATEMENT

    TOK_LOGIC_AND  shift, and go to state 43
    TOK_LOGIC_OR   shift, and go to state 44
    TOK_RBRACKET   shift, and go to state 152


State 147

   78 ITER_STATEMENT: TOK_WHILE TOK_LBRACKET ASSIGN_EXPR . TOK_RBRACKET STATEMENT

    TOK_RBRACKET  shift, and go to state 153


State 148

    6 FUNCTION: VARTYPE_INT DECLARATOR . TOK_LBRACKET FUNC_ARGS TOK_RBRACKET FUNC_STATEMENT
    7         | VARTYPE_INT DECLARATOR . TOK_LBRACKET TOK_RBRACKET FUNC_STATEMENT
    8         | VARTYPE_INT DECLARATOR . TOK_LBRACKET FUNC_ARGS TOK_RBRACKET TOK_SEMICOLON
    9         | VARTYPE_INT DECLARATOR . TOK_LBRACKET TOK_RBRACKET TOK_SEMICOLON

    TOK_LBRACKET  shift, and go to state 12


State 149

   82 JUMP_STATEMENT: TOK_RETURN FUNCTION TOK_SEMICOLON .

    $default  reduce using rule 82 (JUMP_STATEMENT)


State 150

   83 JUMP_STATEMENT: TOK_RETURN LOGIC_EXPR TOK_SEMICOLON .

    $default  reduce using rule 83 (JUMP_STATEMENT)


State 151

   75 FUNC_STATEMENT: TOK_LCBRACKET REC_DECLARATION REC_STATEMENT TOK_RCBRACKET .

    $default  reduce using rule 75 (FUNC_STATEMENT)


State 152

   76 SELECT_STATEMENT: TOK_IF TOK_LBRACKET LOGIC_EXPR TOK_RBRACKET . STATEMENT
   77                 | TOK_IF TOK_LBRACKET LOGIC_EXPR TOK_RBRACKET . STATEMENT TOK_ELSE STATEMENT

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_IF         shift, and go to state 99
    TOK_WHILE      shift, and go to state 100
    TOK_RETURN     shift, and go to state 101
    TOK_BREAK      shift, and go to state 102
    TOK_CONT       shift, and go to state 103
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_LCBRACKET  shift, and go to state 63
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR       go to state 108
    LOGIC_EXPR        go to state 37
    BIT_EXPR          go to state 23
    EQ_EXPR           go to state 24
    REL_EXPR          go to state 25
    SHIFT_EXPR        go to state 26
    ADD_EXPR          go to state 27
    MULT_EXPR         go to state 28
    UNARY             go to state 29
    FACTOR            go to state 30
    STATEMENT         go to state 154
    EXPR_STATEMENT    go to state 111
    FUNC_STATEMENT    go to state 112
    SELECT_STATEMENT  go to state 113
    ITER_STATEMENT    go to state 114
    JUMP_STATEMENT    go to state 115


State 153

   78 ITER_STATEMENT: TOK_WHILE TOK_LBRACKET ASSIGN_EXPR TOK_RBRACKET . STATEMENT

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_IF         shift, and go to state 99
    TOK_WHILE      shift, and go to state 100
    TOK_RETURN     shift, and go to state 101
    TOK_BREAK      shift, and go to state 102
    TOK_CONT       shift, and go to state 103
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_LCBRACKET  shift, and go to state 63
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR       go to state 108
    LOGIC_EXPR        go to state 37
    BIT_EXPR          go to state 23
    EQ_EXPR           go to state 24
    REL_EXPR          go to state 25
    SHIFT_EXPR        go to state 26
    ADD_EXPR          go to state 27
    MULT_EXPR         go to state 28
    UNARY             go to state 29
    FACTOR            go to state 30
    STATEMENT         go to state 155
    EXPR_STATEMENT    go to state 111
    FUNC_STATEMENT    go to state 112
    SELECT_STATEMENT  go to state 113
    ITER_STATEMENT    go to state 114
    JUMP_STATEMENT    go to state 115


State 154

   76 SELECT_STATEMENT: TOK_IF TOK_LBRACKET LOGIC_EXPR TOK_RBRACKET STATEMENT .
   77                 | TOK_IF TOK_LBRACKET LOGIC_EXPR TOK_RBRACKET STATEMENT . TOK_ELSE STATEMENT

    TOK_ELSE  shift, and go to state 156

    TOK_ELSE  [reduce using rule 76 (SELECT_STATEMENT)]
    $default  reduce using rule 76 (SELECT_STATEMENT)


State 155

   78 ITER_STATEMENT: TOK_WHILE TOK_LBRACKET ASSIGN_EXPR TOK_RBRACKET STATEMENT .

    $default  reduce using rule 78 (ITER_STATEMENT)


State 156

   77 SELECT_STATEMENT: TOK_IF TOK_LBRACKET LOGIC_EXPR TOK_RBRACKET STATEMENT TOK_ELSE . STATEMENT

    TOK_LOGIC_NOT  shift, and go to state 15
    TOK_BIT_NOT    shift, and go to state 16
    TOK_IF         shift, and go to state 99
    TOK_WHILE      shift, and go to state 100
    TOK_RETURN     shift, and go to state 101
    TOK_BREAK      shift, and go to state 102
    TOK_CONT       shift, and go to state 103
    TOK_MINUS      shift, and go to state 17
    TOK_LBRACKET   shift, and go to state 18
    TOK_LCBRACKET  shift, and go to state 63
    TOK_N          shift, and go to state 20
    TOK_VAR        shift, and go to state 35

    ASSIGN_EXPR       go to state 108
    LOGIC_EXPR        go to state 37
    BIT_EXPR          go to state 23
    EQ_EXPR           go to state 24
    REL_EXPR          go to state 25
    SHIFT_EXPR        go to state 26
    ADD_EXPR          go to state 27
    MULT_EXPR         go to state 28
    UNARY             go to state 29
    FACTOR            go to state 30
    STATEMENT         go to state 157
    EXPR_STATEMENT    go to state 111
    FUNC_STATEMENT    go to state 112
    SELECT_STATEMENT  go to state 113
    ITER_STATEMENT    go to state 114
    JUMP_STATEMENT    go to state 115


State 157

   77 SELECT_STATEMENT: TOK_IF TOK_LBRACKET LOGIC_EXPR TOK_RBRACKET STATEMENT TOK_ELSE STATEMENT .

    $default  reduce using rule 77 (SELECT_STATEMENT)
